import{_ as e,o as s,c as a,U as n}from"./chunks/framework.8610b7e0.js";const u=JSON.parse('{"title":"HTTP 协议升级","description":"","frontmatter":{},"headers":[],"relativePath":"network/http-upgrade.md","filePath":"network/http-upgrade.md"}'),t={name:"network/http-upgrade.md"},l=n(`<h1 id="http-协议升级" tabindex="-1">HTTP 协议升级 <a class="header-anchor" href="#http-协议升级" aria-label="Permalink to &quot;HTTP 协议升级&quot;">​</a></h1><p>协议升级请求，尤其是从HTTP/1.x到HTTP/2或WebSocket，是一个特定的过程，使客户端和服务器之间的连接能够切换到不同的协议。这里将简要描述协议升级的基本概念和过程。</p><h3 id="http-1-1-升级机制" tabindex="-1">HTTP/1.1 升级机制： <a class="header-anchor" href="#http-1-1-升级机制" aria-label="Permalink to &quot;HTTP/1.1 升级机制：&quot;">​</a></h3><p>HTTP/1.1提供了一个特殊的机制，可以在保持TCP连接的同时更改传输层的协议。这主要是通过<code>Upgrade</code>头部来完成的。</p><ol><li><p><strong>客户端发起请求</strong>： 客户端在其请求头部中包括<code>Upgrade</code>头，该头指明希望切换到的协议。例如，为了切换到WebSocket，客户端将发送：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GET /my-resource HTTP/1.1</span></span>
<span class="line"><span style="color:#A6ACCD;">Host: example.com</span></span>
<span class="line"><span style="color:#A6ACCD;">Connection: Upgrade</span></span>
<span class="line"><span style="color:#A6ACCD;">Upgrade: websocket</span></span></code></pre></div></li><li><p><strong>服务器响应</strong>：</p><ul><li>如果服务器支持并愿意升级到所请求的协议，它将发送<code>101 Switching Protocols</code>状态码作为响应。</li><li>如果服务器不支持或不愿意升级，它可以发送一个非101的响应，如<code>200 OK</code>或<code>400 Bad Request</code>，并继续使用原始协议。</li></ul></li></ol><h3 id="http-2-的升级过程" tabindex="-1">HTTP/2 的升级过程： <a class="header-anchor" href="#http-2-的升级过程" aria-label="Permalink to &quot;HTTP/2 的升级过程：&quot;">​</a></h3><p>HTTP/2的升级过程与上面描述的略有不同。虽然HTTP/2可以使用相同的<code>Upgrade</code>头部进行协议升级，但在实际中，多数HTTP/2连接是通过ALPN（应用层协议协商）在TLS握手期间静默地建立的。</p><ol><li><p><strong>通过ALPN</strong>：当客户端和服务器开始TLS握手时，客户端将提供它所支持的协议列表，其中包括HTTP/2。服务器从列表中选择一个它也支持的协议，并在TLS握手期间通知客户端。这样，当握手完成时，连接已经是HTTP/2。</p></li><li><p><strong>使用<code>Upgrade</code>头部</strong>：这种方法不太常用，但技术上是可能的。客户端在请求头部中包括一个<code>Upgrade: h2c</code>头部，表明它希望升级到非加密的HTTP/2连接。</p></li></ol><h3 id="注意事项" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h3><ul><li>对于HTTP/2，大多数现代浏览器和服务器只支持通过ALPN进行的升级，并且只在TLS（HTTPS）上使用HTTP/2。</li><li>WebSocket通常使用HTTP/1.1的<code>Upgrade</code>头部进行升级。</li><li>升级请求可能受到中间设备（如代理或负载均衡器）的影响，这些设备可能不完全支持所请求的协议。</li></ul><p>总的来说，协议升级是一种允许在不断开TCP连接的情况下更改协议的机制。这使得新的协议可以与现有的基础设施一起使用，而不需要进行重大更改。</p><h3 id="nginx-如何配置" tabindex="-1">Nginx 如何配置 <a class="header-anchor" href="#nginx-如何配置" aria-label="Permalink to &quot;Nginx 如何配置&quot;">​</a></h3><p>为了将Nginx配置为使用HTTP/2，你需要考虑以下几个步骤。但是，请注意，HTTP/2在Nginx中仅支持TLS（即HTTPS）连接。</p><ol><li><p><strong>确保你的Nginx版本支持HTTP/2</strong>:</p><p>首先，你需要确保你的Nginx版本支持HTTP/2。可以使用下面的命令查看：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">nginx -V</span></span></code></pre></div><p>输出中应该包含<code>--with-http_v2_module</code>。</p></li><li><p><strong>在配置文件中启用HTTP/2</strong>:</p><p>找到你的Nginx配置文件（通常是<code>/etc/nginx/nginx.conf</code>或者在<code>/etc/nginx/sites-available/</code>目录中的虚拟主机文件），然后在<code>listen</code>指令中添加<code>http2</code>关键字。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">server {</span></span>
<span class="line"><span style="color:#A6ACCD;">    listen 443 ssl http2;</span></span>
<span class="line"><span style="color:#A6ACCD;">    listen [::]:443 ssl http2;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    # 其他的ssl相关配置, 如ssl_certificate, ssl_certificate_key等</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div></li><li><p><strong>确保你已正确配置SSL/TLS</strong>:</p><p>为了使用HTTP/2，你还需要为你的站点配置SSL/TLS。这意味着你需要一个有效的SSL证书。如果你还没有，可以考虑使用<a href="https://letsencrypt.org/" target="_blank" rel="noreferrer">Let&#39;s Encrypt</a>获取一个免费的证书。</p><p>在你的<code>server</code>块中，确保你已经设置了以下指令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ssl_certificate /etc/nginx/ssl/yourdomain.crt;</span></span>
<span class="line"><span style="color:#A6ACCD;">ssl_certificate_key /etc/nginx/ssl/yourdomain.key;</span></span></code></pre></div></li><li><p><strong>（可选）配置其他HTTP/2设置</strong>:</p><p>你还可以优化其他的HTTP/2相关设置，如<code>http2_push</code>和<code>http2_push_preload</code>，但这些是可选的，并取决于你的具体需求。</p></li><li><p><strong>测试配置并重启Nginx</strong>:</p><p>在应用任何更改后，总是建议测试Nginx配置的有效性：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">sudo nginx -t</span></span></code></pre></div><p>如果没有错误，可以安全地重启Nginx：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">sudo service nginx restart</span></span></code></pre></div></li></ol><p>完成以上步骤后，你的Nginx服务器应该已经启用了HTTP/2支持。你可以使用工具如<a href="https://tools.keycdn.com/http2-test" target="_blank" rel="noreferrer">tools.keycdn.com/http2-test</a>来验证你的站点是否已经成功启用了HTTP/2。</p>`,15),o=[l];function p(c,i,r,d,g,T){return s(),a("div",null,o)}const C=e(t,[["render",p]]);export{u as __pageData,C as default};
