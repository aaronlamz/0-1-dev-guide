import{_ as t,o,c as a,U as T}from"./chunks/framework.8610b7e0.js";const c=JSON.parse('{"title":"HTTP 协议","description":"","frontmatter":{},"headers":[],"relativePath":"network/http.md","filePath":"network/http.md"}'),l={name:"network/http.md"},e=T('<h1 id="http-协议" tabindex="-1">HTTP 协议 <a class="header-anchor" href="#http-协议" aria-label="Permalink to &quot;HTTP 协议&quot;">​</a></h1><p>HTTP协议，全称超文本传输协议（Hypertext Transfer Protocol），是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。HTTP协议定义了客户端和服务器之间的通信格式，主要基于&quot;请求与响应&quot;模式。</p><p>HTTP的主要特点可以包括：</p><ol><li><p><strong>无连接</strong>：每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。为了提升效率，现在的浏览器一般使用长连接，即在一个连接上可以发送多个请求。</p></li><li><p><strong>无状态</strong>：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。这也是为什么在需要保持登录状态的网页需要用到cookie或session技术的原因。</p></li><li><p><strong>支持B/S及C/S模式</strong>。</p></li></ol><p>HTTP协议定义了许多（如GET、POST、PUT、DELETE等）请求方法，这些方法描述了对于资源的不同操作方式。每种方法对应的语义各不相同：</p><ul><li>GET：请求获取指定资源。</li><li>POST：向指定资源提交数据，数据被包含在请求体中。这可能导致新的资源的创建和/或已有资源的修改。</li><li>PUT：向指定资源位置上传其最新内容。</li><li>DELETE：请求服务器删除 Request-URI 所标识的资源。</li><li>HEAD：请求获取由 Request-URI 所标识的资源的响应消息报头。</li><li>CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</li><li>OPTIONS：允许客户端查看服务器的性能。</li><li>TRACE：回显服务器收到的请求，主要用于测试或诊断。</li></ul><p>在HTTP/1.1版本中引入了持久连接，以减少TCP连接的建立和关闭的开销。在HTTP/2中，更进一步引入了多路复用、头部压缩等技术，提高了HTTP协议的性能。</p><p>HTTP协议通信过程中的安全性可以通过使用HTTPS来提升，HTTPS就是在HTTP和TCP之间加入了一个SSL/TLS层，对数据进行加密，提高了数据的保密性和完整性。</p><h2 id="http-1-1-版本中持久连接" tabindex="-1">HTTP/1.1 版本中持久连接 <a class="header-anchor" href="#http-1-1-版本中持久连接" aria-label="Permalink to &quot;HTTP/1.1 版本中持久连接&quot;">​</a></h2><p>在HTTP/1.0中，每个HTTP请求/应答都需要建立一个新的TCP连接。TCP连接的建立包括了&quot;三次握手&quot;，而关闭则需要&quot;四次挥手&quot;，这其中的过程相对耗时。因此，当一个页面包含很多资源需要加载时（如图片、CSS、JavaScript文件等），这种频繁的建立和关闭连接会导致显著的延迟和性能开销。</p><p>为了改善这个问题，HTTP/1.1引入了持久连接（persistent connection），也被称为HTTP keep-alive，或者连接重用（connection reuse）。持久连接的特点是，在一个HTTP会话中，客户端与服务器只需要建立一次TCP连接，之后所有的请求和响应都复用这一次的连接。当请求处理完后，连接不会立即关闭，而是保持打开状态，以便用于后续的请求。</p><p>HTTP/1.1中，默认情况下所有的连接都被视为持久连接，除非明确指定&quot;Connection: close&quot;来要求关闭连接。在一个持久连接上可以发送多个请求，不过这些请求必须串行发送，即每次只能发送一个请求，等待服务器响应后，再发送下一个请求。这种方式虽然减少了TCP连接的建立和关闭的开销，但仍存在一定的效率问题。</p><p>为了进一步提高性能，HTTP/2进一步引入了多路复用（Multiplexing）的概念，允许在一个持久连接上同时并行发送多个请求或者接收多个响应。这样可以避免&quot;队头阻塞&quot;的问题，即便是某一个请求处理比较慢，也不会影响到其他的请求/响应，从而使得连接的利用率更高，性能更好。</p><h2 id="http-2" tabindex="-1">HTTP/2 <a class="header-anchor" href="#http-2" aria-label="Permalink to &quot;HTTP/2&quot;">​</a></h2><p>HTTP/2，也被称为Hypertext Transfer Protocol Version 2，是HTTP协议的第二个主要版本，用于Web数据通信。相比于HTTP/1.1，HTTP/2引入了许多重要的改进，这些改进主要是为了解决Web性能问题，提升数据传输效率。</p><p>以下是HTTP/2的一些主要特性：</p><ol><li><p><strong>二进制协议</strong>：HTTP/2是一个二进制协议，而非HTTP/1.x的文本协议。二进制协议解析更高效、更精确，能够消除不必要的错误和歧义。</p></li><li><p><strong>多路复用</strong>：在一个TCP连接中，HTTP/2可以同时处理多个请求和响应，而不是按顺序一个接一个的处理。这意味着服务器能够在一个响应被处理的同时，处理其他的请求，从而极大地减少了延迟并提升了整体的性能。</p></li><li><p><strong>首部压缩</strong>：HTTP/2引入了HPACK压缩，用于减小请求和响应首部的大小，从而进一步提高性能。</p></li><li><p><strong>服务器推送</strong>：在HTTP/2中，服务器可动将未请求的资源推送给客户端，以便预先缓存，从而提高页面的加载速度。</p></li><li><p><strong>流优先级</strong>：HTTP/2允许设置请求优先级，这使得重要的请求可以优先得到响应，提升用户体验。</p></li><li><p><strong>请求依赖性</strong>：在HTTP/2中，可以设置请求之间的依赖关系，例如，某个请求的处理可能需要等待另一个请求的结果。</p></li></ol><p>这些新特性使得HTTP/2在性能、效率和安全性方面都有了显著的提升，被广泛应用于现代Web开发中。</p><h2 id="http-3" tabindex="-1">HTTP/3 <a class="header-anchor" href="#http-3" aria-label="Permalink to &quot;HTTP/3&quot;">​</a></h2><p>HTTP/3 是 HTTP 协议的最新版本，它在 HTTP/2 的基础上引入了一些重要的改进。HTTP/3 的核心变化是替换了底层的传输协议：由依赖于 TCP 的 HTTP/2 转变为基于 QUIC 的实现。QUIC 是一个基于 UDP 的传输协议，它解决了一些 HTTP/2 在 TCP 上的性能问题。</p><h3 id="主要特点" tabindex="-1">主要特点 <a class="header-anchor" href="#主要特点" aria-label="Permalink to &quot;主要特点&quot;">​</a></h3><h4 id="_1-基于-quic-协议" tabindex="-1">1. 基于 QUIC 协议 <a class="header-anchor" href="#_1-基于-quic-协议" aria-label="Permalink to &quot;1. 基于 QUIC 协议&quot;">​</a></h4><ul><li><strong>更快的连接建立</strong>：QUIC 协议减少了握手次数，实现了更快的连接建立，特别是在已经建立过连接的情况下。</li><li><strong>内置加密</strong>：与 TCP + TLS 相比，QUIC 整合了加密和传输优化，提供了更好的安全性。</li></ul><h4 id="_2-改进的多路复用" tabindex="-1">2. 改进的多路复用 <a class="header-anchor" href="#_2-改进的多路复用" aria-label="Permalink to &quot;2. 改进的多路复用&quot;">​</a></h4><ul><li><strong>避免头阻塞</strong>：HTTP/2 的多路复用在 TCP 上受到“队头阻塞”问题的影响。QUIC 通过分离流并在 UDP 上运行来解决这个问题，使得单个流中的丢包不会影响到其他流。</li></ul><h4 id="_3-连接迁移" tabindex="-1">3. 连接迁移 <a class="header-anchor" href="#_3-连接迁移" aria-label="Permalink to &quot;3. 连接迁移&quot;">​</a></h4><ul><li><strong>连接 ID</strong>：QUIC 提供了连接 ID 的概念，允许即使在底层网络发生变化（如 IP 地址变化）时也能保持连接。</li></ul><h4 id="_4-流量控制和拥塞控制" tabindex="-1">4. 流量控制和拥塞控制 <a class="header-anchor" href="#_4-流量控制和拥塞控制" aria-label="Permalink to &quot;4. 流量控制和拥塞控制&quot;">​</a></h4><ul><li><strong>更高效的控制</strong>：QUIC 实现了改进的流量控制和拥塞控制机制，使得网络连接更加高效和稳定。</li></ul><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li><strong>性能提升</strong>：特别是在高延迟和丢包的网络环境中，HTTP/3 比 HTTP/2 表现更好。</li><li><strong>更好的移动性能</strong>：在移动网络环境下，连接迁移和快速握手对于保持稳定的连接非常有益。</li><li><strong>更强的安全性</strong>：由于 QUIC 从一开始就设计了加密，因此它提供了更为强大的安全保障。</li></ol><h3 id="挑战和限制" tabindex="-1">挑战和限制 <a class="header-anchor" href="#挑战和限制" aria-label="Permalink to &quot;挑战和限制&quot;">​</a></h3><ul><li><strong>广泛支持</strong>：HTTP/3 还未被所有浏览器和服务器广泛支持。</li><li><strong>网络设备兼容性</strong>：某些网络设备和中间件可能需要更新以支持基于 UDP 的 QUIC。</li></ul>',33),r=[e];function i(n,s,P,h,p,H){return o(),a("div",null,r)}const d=t(l,[["render",i]]);export{c as __pageData,d as default};
