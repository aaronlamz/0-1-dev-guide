import{_ as s,o as n,c as a,U as o}from"./chunks/framework.8610b7e0.js";const A=JSON.parse('{"title":"React中的Profiler有什么作用？","description":"","frontmatter":{},"headers":[],"relativePath":"react/profiler.md","filePath":"react/profiler.md"}'),l={name:"react/profiler.md"},e=o(`<h1 id="react中的profiler有什么作用" tabindex="-1">React中的Profiler有什么作用？ <a class="header-anchor" href="#react中的profiler有什么作用" aria-label="Permalink to &quot;React中的Profiler有什么作用？&quot;">​</a></h1><p>在React中，<code>Profiler</code> 是一个用于收集组件树渲染时间信息的组件，它主要用于性能优化。通过将应用中的一部分组件树包裹在<code>&lt;Profiler&gt;</code>标签内，你可以衡量这部分UI渲染所需的时间。这对于识别慢速渲染的组件或部分非常有用。</p><p><code>Profiler</code> 接受两个props：</p><ol><li><strong>id</strong>：一个字符串标识符，用于区分多个Profiler。</li><li><strong>onRender</strong>: 这是一个回调函数，在Profiler包裹的组件树完成每次渲染时触发。</li></ol><p><code>onRender</code> 函数会接收多个参数，包括：</p><ul><li><code>id</code>: <code>Profiler</code> 树的 &quot;id&quot;。</li><li><code>phase</code>: 渲染阶段，即 &quot;mount&quot;（组件挂载）或 &quot;update&quot;（组件更新）。</li><li><code>actualDuration</code>: 实际花费的渲染时间（单位：毫秒）。</li><li><code>baseDuration</code>: 估计没有使用缓存的情况下整个子树渲染所需的时间。</li><li><code>startTime</code>: React开始渲染这个更新的时间。</li><li><code>commitTime</code>: React提交这次更新的时间。</li><li><code>interactions</code>: 属于这个更新的 Set。</li></ul><p>下面是一个简单示例：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Profiler</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">App</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleRender</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;font-style:italic;">phase</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;font-style:italic;">actualDuration</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;font-style:italic;">baseDuration</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;font-style:italic;">startTime</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;font-style:italic;">commitTime</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;font-style:italic;">interactions</span></span>
<span class="line"><span style="color:#F07178;">  ) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">phase</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">actualDuration</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">baseDuration</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">startTime</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">commitTime</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">interactions</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Profiler</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">App</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onRender</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleRender</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/* 你的组件 */</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Profiler</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这样，每次<code>App</code>组件或其子组件进行渲染时，<code>handleRender</code> 函数就会被调用，提供有关渲染过程的详细信息，这些信息可以用于分析和优化性能。</p><h2 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h2><p>React的<code>Profiler</code>组件是基于React的Fiber架构实现的。Fiber架构使React具有对组件树的深度控制，这为性能分析提供了可能性。这里是一些概念性的点来解释<code>Profiler</code>的工作原理：</p><ol><li><p><strong>开始和结束标记</strong>：当渲染开始和结束时，React核心库记录时间戳。</p></li><li><p><strong>Fiber树遍历</strong>：React通过Fiber节点（代表React组件的内部对象）来组织组件树。当Profiler嵌套在组件树中时，React会知道需要特别关注哪些Fiber节点。</p></li><li><p><strong>渲染阶段</strong>：React会计算被<code>Profiler</code>包裹的组件树的<code>actualDuration</code>和<code>baseDuration</code>。这些信息用于分析组件渲染效率。</p></li><li><p><strong>Commit阶段</strong>：一旦组件树更新完成，并且所有生命周期方法和副作用函数都被调用，React会触发<code>Profiler</code>的<code>onRender</code>回调。</p></li><li><p><strong>性能指标收集</strong>：<code>Profiler</code>收集了多个性能指标，包括实际渲染所需时间（<code>actualDuration</code>）、预估无缓存时渲染所需时间（<code>baseDuration</code>）等，然后将这些数据传递给<code>onRender</code>回调。</p></li><li><p><strong>Interactions Tracking</strong>：通过React的Scheduler库，<code>Profiler</code>还可以跟踪触发更新的用户交互，这有助于更细粒度的性能分析。</p></li><li><p><strong>多重Profiler</strong>：React允许在单一应用中使用多个<code>Profiler</code>实例。每个实例都有自己的<code>id</code>和<code>onRender</code>回调。</p></li><li><p><strong>开发模式和生产模式</strong>：通常，<code>Profiler</code>在开发模式下更为详细和准确。在生产模式下，为了性能考虑，某些信息可能不会被收集。</p></li><li><p><strong>异步更新</strong>：由于React 16.x引入的异步渲染功能，<code>Profiler</code>也能准确地跟踪异步更新所需的时间。</p></li></ol><p>这个特性建立在React底层架构的基础之上，通过这些数据，开发者能更准确地分析和改进React应用的性能。需要注意的是，<code>Profiler</code>是React 16.5及以上版本提供的特性。</p>`,13),p=[e];function t(c,r,i,F,D,y){return n(),a("div",null,p)}const C=s(l,[["render",t]]);export{A as __pageData,C as default};
