import{_ as s,o as a,c as n,U as l}from"./chunks/framework.8610b7e0.js";const A=JSON.parse('{"title":"JSX以及工作原理","description":"","frontmatter":{},"headers":[],"relativePath":"react/jsx.md","filePath":"react/jsx.md"}'),o={name:"react/jsx.md"},p=l(`<h1 id="jsx以及工作原理" tabindex="-1">JSX以及工作原理 <a class="header-anchor" href="#jsx以及工作原理" aria-label="Permalink to &quot;JSX以及工作原理&quot;">​</a></h1><p>JSX 是 JavaScript XML 的缩写。它是一种在 JavaScript 中写 XML/HTML 的语法糖，广泛应用于 React，但也可用于其他框架和库。通过 JSX，你可以创建虚拟 DOM 元素，描述 UI 应该呈现的内容和样式。</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>下面是一个简单的 JSX 代码示例：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">className</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">greeting</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello, world!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;;</span></span></code></pre></div><p>看上去很像 HTML，但它其实是 JavaScript。注意属性名 <code>className</code>，在 JSX 中用于替代传统 HTML 的 <code>class</code>，因为 <code>class</code> 是 JavaScript 中的保留字。</p><h2 id="如何工作的" tabindex="-1">如何工作的 <a class="header-anchor" href="#如何工作的" aria-label="Permalink to &quot;如何工作的&quot;">​</a></h2><h3 id="_1-解析-parsing" tabindex="-1">1. 解析 (Parsing) <a class="header-anchor" href="#_1-解析-parsing" aria-label="Permalink to &quot;1. 解析 (Parsing)&quot;">​</a></h3><ul><li><p>当你在 JavaScript 文件中编写 JSX，它并不能被浏览器直接解析和执行。它需要一个转译器（如 Babel）将 JSX 转译成原生的 JavaScript 函数调用。</p></li><li><p>当 Babel 开始转译源代码时，它首先需要理解代码的结构。它会使用 <code>@babel/parser</code> 来解析输入的代码，将字符串源代码转换为一个 AST（抽象语法树）。</p></li><li><p>在这个阶段，例如代码 <code>&lt;div&gt;Hi&lt;/div&gt;</code> 会被解析成类似以下的 AST 结构（简化版本）：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JSXElement</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">openingElement</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JSXOpeningElement</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JSXIdentifier</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">attributes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">children</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JSXText</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hi</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">closingElement</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JSXClosingElement</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JSXIdentifier</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ul><h3 id="_2-转换-transformation" tabindex="-1">2. 转换 (Transformation) <a class="header-anchor" href="#_2-转换-transformation" aria-label="Permalink to &quot;2. 转换 (Transformation)&quot;">​</a></h3><ul><li><p>这个阶段是 Babel 的核心，它使用插件（例如 <code>@babel/plugin-transform-react-jsx</code>）来对 AST 进行修改。</p></li><li><p>对于 JSX，转译器会找到所有的 <code>JSXElement</code> 节点，并将它们转化为 <code>React.createElement</code> 的函数调用。</p></li><li><p>React.createElement：这个函数会创建一个表示 UI 的对象结构，也就是虚拟 DOM 元素。虚拟 DOM 元素是一个描述 UI 部分（如元素类型、属性、子元素等）的普通对象。它们最终会被 React 转化为实际的 DOM 元素。</p></li><li><p>举个例子，之前的 AST 结构会被转换成一个新的 AST，代表以下的 JavaScript 代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul><h3 id="_3-生成-code-generation" tabindex="-1">3. 生成 (Code Generation) <a class="header-anchor" href="#_3-生成-code-generation" aria-label="Permalink to &quot;3. 生成 (Code Generation)&quot;">​</a></h3><ul><li><p>一旦 AST 被转换，下一步是将这个新的 AST 转化回字符串形式的 JavaScript 代码。这是由 Babel 的代码生成器完成的。</p></li><li><p>在我们的例子中，新的 AST 会被转换为：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul><h3 id="插件和预设-plugins-presets" tabindex="-1">插件和预设 (Plugins &amp; Presets) <a class="header-anchor" href="#插件和预设-plugins-presets" aria-label="Permalink to &quot;插件和预设 (Plugins &amp; Presets)&quot;">​</a></h3><ul><li><p>Babel 的功能严重依赖于插件。每一个转换都由一个插件处理。为了处理 JSX，你通常会使用 <code>@babel/plugin-transform-react-jsx</code>。</p></li><li><p>但考虑到需要处理的 ES6+ 功能的数量和其他转换，为每个功能手动配置插件是不现实的。因此，预设应运而生。预设只是一组预定义的插件集合。例如，<code>@babel/preset-react</code> 预设会包括处理 JSX 和其他 React 相关的转换的所有必要插件。</p></li></ul><h3 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h3><p>Babel 在背后做了大量的工作，允许我们使用最新的 JavaScript 和 JSX 语法，同时确保代码能在老旧的浏览器和环境中运行。上述过程提供了对 Babel 如何转译 JSX 的深入了解，但 Babel 还做了许多其他的转换和优化，它们都是通过插件和预设来配置和管理的。</p><h2 id="为什么使用-jsx" tabindex="-1">为什么使用 JSX？ <a class="header-anchor" href="#为什么使用-jsx" aria-label="Permalink to &quot;为什么使用 JSX？&quot;">​</a></h2><ol><li><p><strong>可读性</strong>：由于其声明性质和与 HTML 相似的语法，JSX 使得组件结构更加明确和可读。</p></li><li><p><strong>性能优化</strong>：预编译 JSX 成 <code>React.createElement</code> 调用意味着你在运行时不再需要额外的解析步骤。</p></li><li><p><strong>类型安全</strong>：如果你使用 TypeScript，你可以得到 JSX 的类型检查，从而捕获常见的错误。</p></li><li><p><strong>编写现代 UI</strong>：它允许你更直观地表示 UI 组件的结构和数据，而无需使用冗长的纯 JavaScript 代码。</p></li></ol><p>总结：JSX 是一种让我们能够用更自然、更直观的方式书写 React 组件的语法。通过工具链（如 Babel），它会被转译为 React 可以解析和处理的 JavaScript 代码。</p>`,20),e=[p];function t(c,r,D,F,y,i){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{A as __pageData,u as default};
