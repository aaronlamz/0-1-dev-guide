import{_ as a,o as s,c as e,U as t}from"./chunks/framework.8610b7e0.js";const u=JSON.parse('{"title":"XSS","description":"","frontmatter":{},"headers":[],"relativePath":"security/xss.md","filePath":"security/xss.md"}'),o={name:"security/xss.md"},l=t('<h1 id="xss" tabindex="-1">XSS <a class="header-anchor" href="#xss" aria-label="Permalink to &quot;XSS&quot;">​</a></h1><h2 id="什么是-xss-攻击" tabindex="-1">什么是 XSS 攻击？ <a class="header-anchor" href="#什么是-xss-攻击" aria-label="Permalink to &quot;什么是 XSS 攻击？&quot;">​</a></h2><p>XSS（Cross Site Scripting）跨站脚本攻击，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行，从而获取用户的敏感信息。</p><h2 id="xss-攻击的分类" tabindex="-1">XSS 攻击的分类 <a class="header-anchor" href="#xss-攻击的分类" aria-label="Permalink to &quot;XSS 攻击的分类&quot;">​</a></h2><p>XSS（跨站脚本攻击）主要分为三种类型：反射型、存储型和 DOM 型。这三种类型的攻击各有其特点和执行方式：</p><h3 id="反射型-xss-reflected-xss" tabindex="-1">反射型 XSS（Reflected XSS） <a class="header-anchor" href="#反射型-xss-reflected-xss" aria-label="Permalink to &quot;反射型 XSS（Reflected XSS）&quot;">​</a></h3><ul><li><strong>工作原理</strong>: 反射型 XSS 攻击是通过诱使用户点击一个恶意链接来实现的。这个链接包含攻击脚本，并且当用户点击该链接时，攻击脚本被发送到服务器，然后服务器将脚本“反射”回浏览器，最终在用户的浏览器上执行。</li><li><strong>特点</strong>: 这种攻击通常是一次性的，并且需要诱骗用户点击链接。攻击脚本不会存储在服务器上。</li></ul><h3 id="存储型-xss-stored-xss" tabindex="-1">存储型 XSS（Stored XSS） <a class="header-anchor" href="#存储型-xss-stored-xss" aria-label="Permalink to &quot;存储型 XSS（Stored XSS）&quot;">​</a></h3><ul><li><strong>工作原理</strong>: 存储型 XSS 攻击发生在恶意脚本被永久地存储在目标服务器上（例如在数据库、消息论坛、评论区等）。当用户访问含有恶意脚本的页面时，脚本会被执行。</li><li><strong>特点</strong>: 这种攻击的影响更为严重，因为它不需要特定的用户交互，任何访问了含有恶意脚本页面的用户都可能受到攻击。</li></ul><h3 id="dom-型-xss-dom-based-xss" tabindex="-1">DOM 型 XSS（DOM-based XSS） <a class="header-anchor" href="#dom-型-xss-dom-based-xss" aria-label="Permalink to &quot;DOM 型 XSS（DOM-based XSS）&quot;">​</a></h3><ul><li><strong>工作原理</strong>: DOM 型 XSS 攻击是通过操纵页面的 DOM（文档对象模型）来实现的，而不是通过服务器的响应。攻击者在 URL 中嵌入恶意脚本，当页面脚本读取该 URL 并处理这些数据时，恶意脚本就会被执行。</li><li><strong>特点</strong>: 这种攻击完全在客户端进行，不涉及到服务器端的处理。攻击者利用存在安全漏洞的 JavaScript 代码来实施攻击。</li></ul><h2 id="具体案例" tabindex="-1">具体案例 <a class="header-anchor" href="#具体案例" aria-label="Permalink to &quot;具体案例&quot;">​</a></h2><h3 id="反射型-xss-攻击的例子" tabindex="-1">反射型 XSS 攻击的例子 <a class="header-anchor" href="#反射型-xss-攻击的例子" aria-label="Permalink to &quot;反射型 XSS 攻击的例子&quot;">​</a></h3><p>假设有一个搜索框，用户输入的搜索词会被直接显示在搜索结果页面上。攻击者可以构造一个包含恶意脚本的搜索词链接，比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">http://example.com/search?query=&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</span></span></code></pre></div><p>如果网站没有正确处理用户输入，当其他用户点击这个链接时，他们的浏览器会执行 <code>&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code>，导致一个弹窗显示“XSS”。</p><h3 id="存储型-xss-攻击的例子" tabindex="-1">存储型 XSS 攻击的例子 <a class="header-anchor" href="#存储型-xss-攻击的例子" aria-label="Permalink to &quot;存储型 XSS 攻击的例子&quot;">​</a></h3><p>考虑一个论坛帖子或评论系统，用户可以提交自己的评论。攻击者在评论中插入一个恶意脚本：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</span></span></code></pre></div><p>如果这个脚本被存储在服务器上，并且在其他用户浏览帖子时原样显示，那么每个访问该帖子的用户都会看到一个弹窗显示“XSS”。</p><h3 id="dom-型-xss-攻击的例子" tabindex="-1">DOM 型 XSS 攻击的例子 <a class="header-anchor" href="#dom-型-xss-攻击的例子" aria-label="Permalink to &quot;DOM 型 XSS 攻击的例子&quot;">​</a></h3><p>假设一个网页上的 JavaScript 代码会根据 URL 的参数动态更改页面内容，例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">someElement</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> location</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hash</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>攻击者可以构造一个带有恶意脚本的 URL，比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">http://example.com/#&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</span></span></code></pre></div><p>当用户访问这个链接时，页面上的 JavaScript 会将 URL 中的 hash 部分（<code>&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code>）插入到页面中，导致脚本执行。</p><h2 id="xss-攻击的危害" tabindex="-1">XSS 攻击的危害 <a class="header-anchor" href="#xss-攻击的危害" aria-label="Permalink to &quot;XSS 攻击的危害&quot;">​</a></h2><p>XSS 攻击可以对网站造成以下危害：</p><ul><li><p>盗取用户的身份信息，冒充用户发起恶意请求。</p></li><li><p>盗取用户的敏感信息，如网银账号等。</p></li><li><p>在页面中生成浮窗广告，影响用户体验。</p></li><li><p>注入恶意代码，攻击网站的其他漏洞。</p></li></ul><h2 id="xss-攻击的防御" tabindex="-1">XSS 攻击的防御 <a class="header-anchor" href="#xss-攻击的防御" aria-label="Permalink to &quot;XSS 攻击的防御&quot;">​</a></h2><p>防御 XSS（跨站脚本攻击）的关键是采取多层防御策略，确保即使一个措施失败，其他措施仍然能够提供保护。以下是一些有效的防御 XSS 攻击的方法：</p><ol><li><p><strong>内容安全策略（CSP）</strong>: 通过设置 HTTP 响应头中的 <code>Content-Security-Policy</code>，你可以控制浏览器加载和执行的资源。例如，你可以限制只能从可信域名加载脚本，阻止内联脚本的执行，以及禁用 <code>eval()</code> 等不安全的 JavaScript 功能。</p></li><li><p><strong>转义用户输入</strong>: 在将用户提供的数据插入 HTML、JavaScript、CSS 或其他上下文中时，应该对数据进行适当的转义。例如，对于插入 HTML 的数据，应该转义 <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>&quot;</code>, <code>&#39;</code> 等字符。</p></li><li><p><strong>验证和清理用户输入</strong>: 使用库如 OWASP Java HTML Sanitizer、Google Caja 等来清理和验证用户输入，确保移除或转义潜在的恶意内容。</p></li><li><p><strong>使用安全的框架</strong>: 许多现代的前端框架（如 React、Angular、Vue.js）自带防御 XSS 的机制，比如自动转义绑定到视图的数据。确保充分利用这些框架提供的安全特性。</p></li><li><p><strong>避免使用 <code>innerHTML</code></strong>: 使用 <code>innerHTML</code> 属性插入用户提供的内容时特别危险，因为它可以执行 HTML 中的脚本。改用 <code>textContent</code> 或框架提供的安全替代方法。</p></li><li><p><strong>Cookie 的 <code>HttpOnly</code> 标志</strong>: 将 <code>HttpOnly</code> 标志添加到 Cookie 上，可以防止 JavaScript 通过 XSS 访问 Cookie。这有助于减少某些类型的 XSS 攻击所能造成的影响。</p></li><li><p><strong>验证和过滤 URL</strong>: 对于从用户输入或其他不可信源获取的 URL，应进行严格的验证和过滤，确保它们不包含 JavaScript: 等不安全的协议。</p></li><li><p><strong>安全的文件上传处理</strong>: 如果允许用户上传文件，确保对上传的文件进行严格的验证，防止上传恶意脚本文件。</p></li></ol>',32),r=[l];function n(i,c,p,d,S,h){return s(),e("div",null,r)}const x=a(o,[["render",n]]);export{u as __pageData,x as default};
