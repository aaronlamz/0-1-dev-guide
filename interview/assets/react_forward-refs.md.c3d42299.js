import{_ as s,o as a,c as n,U as o}from"./chunks/framework.8610b7e0.js";const C=JSON.parse('{"title":"解释React中的forwardRefs和它们的用途","description":"","frontmatter":{},"headers":[],"relativePath":"react/forward-refs.md","filePath":"react/forward-refs.md"}'),l={name:"react/forward-refs.md"},p=o(`<h1 id="解释react中的forwardrefs和它们的用途" tabindex="-1">解释React中的forwardRefs和它们的用途 <a class="header-anchor" href="#解释react中的forwardrefs和它们的用途" aria-label="Permalink to &quot;解释React中的forwardRefs和它们的用途&quot;">​</a></h1><h2 id="什么是-forward-refs" tabindex="-1">什么是 Forward Refs？ <a class="header-anchor" href="#什么是-forward-refs" aria-label="Permalink to &quot;什么是 Forward Refs？&quot;">​</a></h2><p>在 React 中，<code>ref</code> 是一个特殊的属性，用于获取组件的 DOM 元素或子组件的实例。通常，<code>ref</code> 不能传递给函数组件，因为它们没有实例。这就是 <code>React.forwardRef</code> 发挥作用的地方。</p><p>使用 <code>React.forwardRef</code> 包装的组件可以接收一个 <code>ref</code> 属性，并将其转发到其 DOM 元素或某个子组件。这通常用于库组件，这些组件在内部需要访问 DOM，但又不想破坏组件的封装。</p><h2 id="如何使用-forward-ref" tabindex="-1">如何使用 Forward Ref？ <a class="header-anchor" href="#如何使用-forward-ref" aria-label="Permalink to &quot;如何使用 Forward Ref？&quot;">​</a></h2><p>使用 <code>React.forwardRef</code> 非常简单。它接受一个渲染函数，并返回一个新的可转发 <code>ref</code> 到该函数的 React 组件。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MyButton </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forwardRef</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ref</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">className</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="forward-ref-的用途" tabindex="-1">Forward Ref 的用途？ <a class="header-anchor" href="#forward-ref-的用途" aria-label="Permalink to &quot;Forward Ref 的用途？&quot;">​</a></h2><ol><li><p><strong>组件库或高阶组件</strong></p><p>在构建可复用的组件库或高阶组件（HOC）时，<code>forwardRef</code> 非常有用。这样，库的使用者可以获取内部 DOM 元素的引用。</p></li><li><p><strong>封装 DOM 操作</strong></p><p>使用 <code>forwardRef</code> 可以更好地封装需要直接操作 DOM 的行为（例如，获取输入焦点、触发动画等）。</p></li><li><p><strong>与第三方库集成</strong></p><p>当与需要直接访问 DOM 节点的第三方库集成时，<code>forwardRef</code> 是一种非常方便的方式。</p></li><li><p><strong>优化性能</strong></p><p>在某些情况下，使用 <code>ref</code> 可以避免不必要的组件渲染，从而优化应用性能。</p></li></ol><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>下面是一个简单的使用 <code>forwardRef</code> 的示例：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useRef</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> FancyButton </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forwardRef</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ref</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">className</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fancy-button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">App</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useRef</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleClick</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 使用 ref 访问 FancyButton DOM 节点</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">focus</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FancyButton</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">Click me!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">FancyButton</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleClick</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">Focus the fancy button</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这个示例中，<code>FancyButton</code> 使用 <code>forwardRef</code> 来接收一个 <code>ref</code> 并将其传递给 <code>&lt;button&gt;</code> 元素。在父组件（<code>App</code>）中，我们使用 <code>useRef</code> 创建一个 <code>ref</code>，然后通过点击一个普通的按钮来使 <code>FancyButton</code> 获取焦点。</p><h2 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h2><p><code>React.forwardRef</code> 的实现原理并不太复杂，但是要理解它，首先需要了解 React 组件和 <code>ref</code> 的基础知识。</p><p>在 React 中，<code>ref</code> 对象通常用于获取组件的 DOM 元素或组件实例。但是，函数组件由于没有实例，不能使用 <code>ref</code>。<code>React.forwardRef</code> 是解决这一问题的一种方式。</p><h3 id="实现原理概览" tabindex="-1">实现原理概览： <a class="header-anchor" href="#实现原理概览" aria-label="Permalink to &quot;实现原理概览：&quot;">​</a></h3><ol><li><p><strong>封装组件</strong>：<code>React.forwardRef</code> 实际上是一个返回新组件的高阶函数。这个新组件能够将其接收到的 <code>ref</code> 属性转发到内部的一个子组件。</p></li><li><p><strong>传递 <code>ref</code></strong>: 在新组件内部，<code>React.forwardRef</code> 将 <code>ref</code> 作为第二个参数传递给渲染函数（第一个参数是 <code>props</code>）。这样，渲染函数就能明确地将 <code>ref</code> 分配给某个 DOM 元素或类组件。</p></li><li><p><strong>React 元素创建</strong>: 当这个被 <code>forwardRef</code> 包裹的组件在 JSX 中使用时，React 会在 <code>createElement</code> 函数中识别这个组件类型，并正确地将 <code>ref</code> 属性设置在内部元素上。</p></li></ol><p>简单地说，<code>React.forwardRef</code> 创建了一个特殊类型的 React 组件，这个组件知道如何将其 <code>ref</code> 参数 &quot;转发&quot; 给渲染函数。</p><h3 id="代码示例" tabindex="-1">代码示例： <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例：&quot;">​</a></h3><p>假设我们有这样一个非常简化的 <code>forwardRef</code> 函数：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">forwardRef</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">renderFunction</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ForwardRefComponent</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">extends</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    render</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">forwardedRef</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">rest</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">renderFunction</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rest</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">forwardedRef</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这个 <code>forwardRef</code> 函数返回一个新的 React 组件，该组件将其接收到的 <code>forwardedRef</code>（实际 API 使用的是 <code>ref</code>，这里为了解释清晰使用了不同的名字）传递给提供的 <code>renderFunction</code>。</p><p>这是一个非常基础和简化的解释，实际的 <code>React.forwardRef</code> 实现会更加复杂，因为它需要处理各种边缘情况和优化。</p><p>但是，从高级角度来看，<code>React.forwardRef</code> 的实现原理主要是在 React 元素树中正确地传递和分配 <code>ref</code>。</p>`,25),e=[p];function t(c,r,F,D,y,d){return a(),n("div",null,e)}const A=s(l,[["render",t]]);export{C as __pageData,A as default};
