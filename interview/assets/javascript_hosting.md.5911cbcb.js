import{_ as s,o as a,c as n,U as o}from"./chunks/framework.8610b7e0.js";const A=JSON.parse('{"title":"变量提升","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/hosting.md","filePath":"javascript/hosting.md"}'),l={name:"javascript/hosting.md"},e=o(`<h1 id="变量提升" tabindex="-1">变量提升 <a class="header-anchor" href="#变量提升" aria-label="Permalink to &quot;变量提升&quot;">​</a></h1><p>变量提升（Hoisting）是 JavaScript 引擎的一种工作机制。在代码执行之前，JavaScript 引擎会首先扫描整个代码，找出所有的变量声明和函数声明，并将它们移至它们各自作用域的顶部。这个过程被称为“提升”。</p><p>以下几点可以帮助更深入地理解这个概念：</p><h3 id="var-声明" tabindex="-1">var 声明 <a class="header-anchor" href="#var-声明" aria-label="Permalink to &quot;var 声明&quot;">​</a></h3><p>对于使用 <code>var</code> 关键字声明的变量，变量提升会将声明移至作用域顶部，但不会移动初始化。</p><p>举个例子：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 输出 &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 输出 &#39;5&#39;</span></span></code></pre></div><p>在这个例子中，变量 <code>a</code> 的声明被提升到作用域顶部，但其初始化值（5）没有被提升。因此，第一个 <code>console.log(a)</code> 输出的是 <code>undefined</code>。</p><h3 id="let-和-const-声明" tabindex="-1">let 和 const 声明 <a class="header-anchor" href="#let-和-const-声明" aria-label="Permalink to &quot;let 和 const 声明&quot;">​</a></h3><p><code>let</code> 和 <code>const</code> 声明有一个所谓的“暂时性死区”（Temporal Dead Zone，简称 TDZ），这意味着它们实际上没有被提升，或者说提升但不可访问。</p><p>例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// ReferenceError: Cannot access &#39;b&#39; before initialization</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="函数声明" tabindex="-1">函数声明 <a class="header-anchor" href="#函数声明" aria-label="Permalink to &quot;函数声明&quot;">​</a></h3><p>函数声明也会被提升，并且函数的整个定义都会被提升。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 输出 &#39;Hello&#39;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这里的 <code>foo</code> 函数在调用它的代码行之前就已经被提升和定义了，因此该代码能正常工作。</p><h3 id="函数表达式" tabindex="-1">函数表达式 <a class="header-anchor" href="#函数表达式" aria-label="Permalink to &quot;函数表达式&quot;">​</a></h3><p>与函数声明不同，函数表达式（无论是匿名的还是具名的）不会被提升。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">bar</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// TypeError: bar is not a function</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello again</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>在这里，<code>bar</code> 变量被提升并初始化为 <code>undefined</code>，尝试调用 <code>bar()</code> 会导致一个类型错误。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>变量提升是 JavaScript 的一种特性，了解这一点可以帮助你避免某些常见的错误和陷阱。不过，现代的开发实践通常推荐使用 <code>let</code> 和 <code>const</code> 来声明变量，因为它们有更直观和更少出错的作用域规则。</p>`,22),p=[e];function t(c,r,i,y,D,d){return a(),n("div",null,p)}const C=s(l,[["render",t]]);export{A as __pageData,C as default};
