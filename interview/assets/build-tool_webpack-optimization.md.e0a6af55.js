import{_ as s,o as a,c as n,U as l}from"./chunks/framework.8610b7e0.js";const A=JSON.parse('{"title":"webpack优化策略","description":"","frontmatter":{},"headers":[],"relativePath":"build-tool/webpack-optimization.md","filePath":"build-tool/webpack-optimization.md"}'),o={name:"build-tool/webpack-optimization.md"},p=l(`<h1 id="webpack优化策略" tabindex="-1">webpack优化策略 <a class="header-anchor" href="#webpack优化策略" aria-label="Permalink to &quot;webpack优化策略&quot;">​</a></h1><p>Webpack 优化是一个持续研究的话题，因为随着 Webpack 和相关插件的不断更新和演进，可用的优化策略也在不断增加。以下是一些常见的 Webpack 优化策略：</p><ol><li><p><strong>使用最新版本的 Webpack 和插件</strong>:</p><ul><li>新版本通常会包含性能改进和bug修复。</li></ul></li><li><p><strong>模式设置为 &quot;production&quot;</strong>:</p><ul><li>这会启动许多 Webpack 内部的优化，如代码压缩和摇树优化。</li></ul></li><li><p><strong>利用缓存</strong>:</p><ul><li>使用 <code>babel-loader</code> 时，可以设置 <code>cacheDirectory</code> 选项。</li><li>使用 <code>cache-loader</code> 来缓存其他的加载器的结果。</li><li>Webpack 5 也引入了持久化缓存，可进一步加速构建。</li></ul></li><li><p><strong>代码分割 (Code Splitting)</strong>:</p><ul><li>利用 Webpack 的 <code>splitChunks</code> 插件将公共代码抽取到单独的 chunks。</li><li>使用动态 <code>import()</code> 语法进行异步加载。</li></ul></li><li><p><strong>Tree Shaking</strong>:</p><ul><li>确保项目的 <code>package.json</code> 文件中的 <code>sideEffects</code> 属性被正确配置，以去除未使用的代码。</li></ul></li><li><p><strong>压缩代码</strong>:</p><ul><li>使用 <code>terser-webpack-plugin</code> 对 JS 进行压缩。</li><li>使用 <code>css-minimizer-webpack-plugin</code> 对 CSS 进行压缩。</li></ul></li><li><p><strong>优化图片和其他资源</strong>:</p><ul><li>使用 <code>image-webpack-loader</code> 或 <code>imagemin-webpack-plugin</code> 对图片进行压缩。</li><li>使用 <code>file-loader</code> 和 <code>url-loader</code> 优化文件的导入。</li></ul></li><li><p><strong>使用 <code>thread-loader</code> 进行多进程处理</strong>:</p><ul><li>当在项目中使用 Babel 或其他资源密集型的加载器时，可以使用 <code>thread-loader</code> 加速构建。</li></ul></li><li><p><strong>减少解析</strong>:</p><ul><li>减少 Webpack 需要查找和解析模块的位置，例如设置 <code>resolve.modules</code> 和 <code>resolve.extensions</code>。</li></ul></li><li><p><strong>外部化 (Externals)</strong>:</p></li></ol><ul><li>对于在多个应用程序中使用的大型库（如 React 或 lodash），可以将它们标记为外部资源，并通过 CDN 加载。</li></ul><ol start="11"><li><strong>分析和检查</strong>:</li></ol><ul><li>使用 <code>webpack-bundle-analyzer</code> 或类似的工具来分析 bundle 以找出潜在的优化点。</li></ul><ol start="12"><li><strong>使用 <code>ignore-plugin</code></strong>:</li></ol><ul><li>如果知道某些模块或依赖不会被使用，可以使用此插件忽略它们，减少最终的打包大小。</li></ul><ol start="13"><li><strong>减少插件使用</strong>:</li></ol><ul><li>并不是说插件不好，但是过多不必要的插件会增加构建时间。只使用真正需要的插件。</li></ul><ol start="14"><li><strong>优化 CSS</strong>:</li></ol><ul><li>使用 <code>MiniCssExtractPlugin</code> 从 JS 中提取 CSS。</li><li>使用 <code>PurifyCSS</code> 或 <code>purgecss-webpack-plugin</code> 删除未使用的 CSS。</li></ul><p>这些策略只是对 Webpack 优化的一个简要概述。具体的优化方法可能会根据项目的特定需求和环境而有所不同。</p><h2 id="代码分割-code-splitting-实现原理" tabindex="-1">代码分割 (Code Splitting) 实现原理 <a class="header-anchor" href="#代码分割-code-splitting-实现原理" aria-label="Permalink to &quot;代码分割 (Code Splitting) 实现原理&quot;">​</a></h2><p>代码分割（Code Splitting）是一种优化技术，使你可以按需加载代码而不是加载一个大的打包文件。这对于大型应用尤为重要，因为它可以减少首次加载的代码量，从而提高性能。</p><h3 id="实现原理" tabindex="-1">实现原理： <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理：&quot;">​</a></h3><ol><li><strong>按需加载</strong>：Webpack 允许你将代码标记为“可拆分”或“按需加载”。当特定的代码（例如由于路由导航或某个事件）被请求时，这些标记的模块才会被加载。</li><li><strong>异步加载</strong>：当模块被标记为可拆分时，Webpack 会创建一个新的 chunk。这个 chunk 会与主 bundle 文件分开，只有当它实际需要时才会被异步加载。</li><li><strong>公共代码拆分</strong>：Webpack 可以识别多个 chunk 之间的公共模块，并将它们提取到一个单独的 chunk 文件中，这样可以避免重复加载。</li></ol><h3 id="代码实现" tabindex="-1">代码实现： <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现：&quot;">​</a></h3><ol><li><p><strong>使用动态导入</strong>： JavaScript 的 <code>import()</code> 语法允许你动态地加载模块。当使用像 Babel 这样的工具时，这个语法会被转化为 Webpack 可以理解的代码，从而创建一个新的 chunk。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 假设你想要按需加载一个模块 named \`moduleA\`</span></span>
<span class="line"><span style="color:#A6ACCD;">button</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">import</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./moduleA</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">moduleA</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">moduleA</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p><strong>使用 Webpack 的 <code>splitChunks</code> 选项</strong>： 这是一种自动进行代码拆分的方法。Webpack 会检查你的代码，并自动地将公共模块移到一个单独的 chunk。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">splitChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>在这里，<code>chunks: &#39;all&#39;</code> 指示 Webpack 检查异步和非异步的 chunks，并提取它们之间的共享代码。</p></li><li><p><strong>路由级代码拆分</strong>： 对于使用前端框架的 SPA（如 React、Vue 或 Angular），常见的代码拆分模式是在路由级别。例如，使用 React 和 React-Router，可以这样做：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BrowserRouter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Router</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Route</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Switch</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-router-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Home </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lazy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./routes/Home</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> About </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lazy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./routes/About</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">App</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">React.Suspense</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Loading...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Switch</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">exact</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">component</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">Home</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/about</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">component</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">About</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Switch</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">React.Suspense</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在上面的代码中，<code>React.lazy()</code> 和 <code>React.Suspense</code> 一起使用，可以轻松地实现路由级的代码拆分。</p></li></ol><p>通过这些方法，你可以优化应用的加载性能，确保用户仅加载他们真正需要的代码。</p><h3 id="具体配置" tabindex="-1">具体配置 <a class="header-anchor" href="#具体配置" aria-label="Permalink to &quot;具体配置&quot;">​</a></h3><p>Webpack 使用 <code>SplitChunksPlugin</code> 来检查和拆分公共模块。<code>optimization.splitChunks</code> 是你在 <code>webpack.config.js</code> 文件中配置的对象，它提供了一系列选项，让你可以决定如何进行代码拆分。</p><p>下面的代码展示了如何配置 <code>splitChunks</code> 选项来自动分割公共模块：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ... 其他配置项</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">splitChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 可以是 &#39;all&#39;，&#39;async&#39; 或 &#39;initial&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">minSize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 形成一个新代码块最小的体积</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">maxSize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// split code block 的最大体积，0 表示无上限</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">minChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 一个模块至少使用多少次才会被分割</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">maxAsyncRequests</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 按需加载时并行请求的最大数量</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">maxInitialRequests</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 一个入口的最大并行请求数</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">automaticNameDelimiter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">~</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 生成的名称的分隔符</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">cacheGroups</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 分割 node_modules 中的库</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">vendors</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#F07178;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 分割重复使用的代码块</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#F07178;">minChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#F07178;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#F07178;">reuseExistingChunk</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 如果一个模块已经被打包过，就重用这个模块</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p><strong>原理简述</strong>:</p><ol><li>Webpack 首先分析项目中各个模块的依赖关系。</li><li>根据 <code>splitChunks</code> 的配置，Webpack 会确定哪些模块是公共模块。例如，如果一个模块被多个入口引用，并且引用次数超过 <code>minChunks</code> 设置的值，那么这个模块会被认为是一个公共模块。</li><li><code>cacheGroups</code> 定义了代码分割的规则。例如，你可以告诉 Webpack 分割 <code>node_modules</code> 里的代码（通常是你的项目依赖），这样你的应用代码和第三方库代码会被分开打包。</li><li>公共模块被分离到新的代码块（chunks）中，并根据配置生成对应的文件。</li></ol><p>在编译时，Webpack 会按照上面的规则拆分代码，这样可以有效地减少客户端加载的代码量，特别是在缓存利用得当的情况下。</p>`,27),e=[p];function t(c,r,D,y,F,i){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
