import{_ as s,o as n,c as a,U as l}from"./chunks/framework.8610b7e0.js";const A=JSON.parse('{"title":"什么是受控组件和非受控组件？","description":"","frontmatter":{},"headers":[],"relativePath":"react/controlled-component.md","filePath":"react/controlled-component.md"}'),o={name:"react/controlled-component.md"},p=l(`<h1 id="什么是受控组件和非受控组件" tabindex="-1">什么是受控组件和非受控组件？ <a class="header-anchor" href="#什么是受控组件和非受控组件" aria-label="Permalink to &quot;什么是受控组件和非受控组件？&quot;">​</a></h1><p>在 React 中，表单元素的处理方式通常可以分为两类：受控组件（Controlled Components）和非受控组件（Uncontrolled Components）。</p><h2 id="受控组件" tabindex="-1">受控组件 <a class="header-anchor" href="#受控组件" aria-label="Permalink to &quot;受控组件&quot;">​</a></h2><p>在受控组件中，表单元素的状态是由 React 组件来管理的。这意味着输入框的值（或其他表单元素的状态）由组件的 state 控制，通常通过 <code>onChange</code> 事件将输入的值反映到组件的状态中。</p><p>这是一个受控组件的简单例子：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ControlledInput</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setValue</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleChange</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setValue</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">onChange</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleChange</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在上面的例子中，<code>input</code> 元素的值由组件的 <code>value</code> 状态变量控制，<code>handleChange</code> 函数负责更新这个状态变量。</p><h2 id="非受控组件" tabindex="-1">非受控组件 <a class="header-anchor" href="#非受控组件" aria-label="Permalink to &quot;非受控组件&quot;">​</a></h2><p>与受控组件相反，非受控组件不由 React 的 state 管理，而是由 DOM 元素自身管理。这意味着在非受控组件中，React 不会追踪或修改表单元素的状态。通常，非受控组件通过 <code>ref</code> 访问 DOM 元素。</p><p>这是一个非受控组件的简单例子：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useRef</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">UncontrolledInput</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">inputRef</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useRef</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleSubmit</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Input Value: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">inputRef</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">inputRef</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleSubmit</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">Submit</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这个例子中，<code>input</code> 元素的值直接由 DOM 管理，而 <code>handleSubmit</code> 函数通过 <code>ref</code> 访问这个 DOM 元素以获取其值。</p><h2 id="区别与选择" tabindex="-1">区别与选择 <a class="header-anchor" href="#区别与选择" aria-label="Permalink to &quot;区别与选择&quot;">​</a></h2><ul><li><strong>受控组件</strong>：更易于操作和验证表单状态，以及集成到 Redux 或其他状态管理库。</li><li><strong>非受控组件</strong>：更易于与非 React 的代码和库集成，或者用于需要直接访问 DOM 元素的情况。</li></ul><p>通常，建议优先使用受控组件，因为这样会让状态逻辑更容易管理和追踪。但在某些特定场景下，例如文件输入或第三方库集成，非受控组件可能会更合适。</p><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><p>受控组件和非受控组件各有其适用的场景：</p><h3 id="受控组件适用场景" tabindex="-1">受控组件适用场景： <a class="header-anchor" href="#受控组件适用场景" aria-label="Permalink to &quot;受控组件适用场景：&quot;">​</a></h3><ol><li><strong>表单验证</strong>：受控组件更容易与表单验证逻辑集成。</li><li><strong>条件渲染</strong>：基于表单状态动态渲染其他 UI 组件。</li><li><strong>实时搜索或筛选</strong>：当用户输入时，可以立即对数据进行筛选或触发其他动作。</li><li><strong>状态管理集成</strong>：与 Redux、MobX 或其他状态管理库更容易集成。</li><li><strong>复杂的表单逻辑</strong>：如果有跨多个输入元素的复杂业务逻辑，受控组件通常更容易管理。</li><li><strong>数据格式化</strong>：例如，将用户输入的文本自动转换为大写或货币格式。</li></ol><h3 id="非受控组件适用场景" tabindex="-1">非受控组件适用场景： <a class="header-anchor" href="#非受控组件适用场景" aria-label="Permalink to &quot;非受控组件适用场景：&quot;">​</a></h3><ol><li><strong>第三方库集成</strong>：某些第三方 UI 库可能更适合非受控组件。</li><li><strong>文件输入</strong>：<code>&lt;input type=&quot;file&quot; /&gt;</code> 是非受控组件的经典示例，因为在 React 中，你不能设置文件输入的值。</li><li><strong>快速原型开发</strong>：如果你只是快速地搭建一个原型，可能会发现使用非受控组件更快。</li><li><strong>访问原生 DOM 属性</strong>：如果你需要直接操作 DOM 元素，非受控组件通过 <code>ref</code> 提供了一种方式。</li><li><strong>避免不必要的重新渲染</strong>：在某些边缘情况下，使用非受控组件可能会避免不必要的组件重新渲染。</li></ol><p>受控组件提供了更多的灵活性和可预测性，而非受控组件则在某些特定情况下可能更简单和方便。根据应用的具体需求来选择使用哪种类型的组件。</p>`,22),e=[p];function t(c,r,F,D,y,i){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
