import{_ as e,o as a,c as t,U as l}from"./chunks/framework.8610b7e0.js";const m=JSON.parse('{"title":"Vue中的template及实现原理","description":"","frontmatter":{},"headers":[],"relativePath":"vue/template.md","filePath":"vue/template.md"}'),s={name:"vue/template.md"},p=l(`<h1 id="vue中的template及实现原理" tabindex="-1">Vue中的template及实现原理 <a class="header-anchor" href="#vue中的template及实现原理" aria-label="Permalink to &quot;Vue中的template及实现原理&quot;">​</a></h1><p>在 Vue 中，<code>template</code> 是描述组件视图应该如何显示的一种声明性方法。通过 <code>template</code>，开发者可以声明式地描述组件的 UI，而 Vue 的作用是将这些模板转换为实际的 DOM。</p><h3 id="vue-的-template-是什么" tabindex="-1">Vue 的 <code>template</code> 是什么？ <a class="header-anchor" href="#vue-的-template-是什么" aria-label="Permalink to &quot;Vue 的 \`template\` 是什么？&quot;">​</a></h3><p>在 Vue 组件中，通常有两种方法来定义组件的视图：</p><ol><li>使用模板字符串，通常放在 Vue 文件的 <code>&lt;template&gt;</code> 标签内，或直接在 Vue 实例/组件的 <code>template</code> 选项中。</li><li>使用渲染函数。</li></ol><p><code>template</code> 更为声明式，易读且易写，对于不需要直接操作 DOM 或没有复杂逻辑的 UI 描述非常合适。例如：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ title }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">handleClick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click me!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="vue-template-的实现原理" tabindex="-1">Vue <code>template</code> 的实现原理： <a class="header-anchor" href="#vue-template-的实现原理" aria-label="Permalink to &quot;Vue \`template\` 的实现原理：&quot;">​</a></h3><ol><li><p><strong>编译</strong>：Vue 会使用其模板编译器将 <code>template</code> 转化为一个渲染函数。这个过程大致为：</p><ul><li>解析模板字符串，将其转化为一个 AST（抽象语法树）。</li><li>优化 AST，标记某些静态节点，这样在 patch 的过程中可以跳过它们。</li><li>将 AST 转化为渲染函数的字符串形式。</li></ul><p>这个渲染函数最终会返回一个 Virtual DOM 树。</p></li><li><p><strong>Virtual DOM</strong>：渲染函数返回的 Virtual DOM 是对真实 DOM 的轻量级表示。当数据改变时，Vue 会生成一个新的 Virtual DOM 树。然后，这个新的树会与旧的树进行对比（diffing），以确定哪些部分需要更新。</p></li><li><p><strong>更新 DOM</strong>：一旦确定了哪些部分发生了变化，Vue 会使用其 &quot;patching&quot; 算法高效地更新真实 DOM。这个过程比直接操作真实 DOM 要快，因为大部分工作都在 JavaScript 层完成，只有实际的更改会影响到 DOM。</p></li></ol><p>通过这种方式，Vue 允许开发者以声明式的方式定义 UI，同时确保性能高效且快速。这是因为大部分的重工作（如 diffing 和 patching）都是在 JavaScript 中进行的，而不是在真实的 DOM 中，这显著提高了性能。</p>`,10),o=[p];function n(c,r,i,D,u,d){return a(),t("div",null,o)}const y=e(s,[["render",n]]);export{m as __pageData,y as default};
