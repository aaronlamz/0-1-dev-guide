import{_ as s,o as n,c as a,U as l}from"./chunks/framework.8610b7e0.js";const o="/open-course/interview/assets/lifecycle.508925ff.png",A=JSON.parse('{"title":"React中的组件生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"react/component-lifecycle.md","filePath":"react/component-lifecycle.md"}'),p={name:"react/component-lifecycle.md"},e=l('<h1 id="react中的组件生命周期" tabindex="-1">React中的组件生命周期 <a class="header-anchor" href="#react中的组件生命周期" aria-label="Permalink to &quot;React中的组件生命周期&quot;">​</a></h1><blockquote><p>React 最新版本的生命周期，之前的版本已经废弃了一些生命周期方法，这里只介绍最新版本的生命周期方法。</p></blockquote><p>在React中，组件的生命周期可以分为三个主要阶段：挂载（Mounting）、更新（Updating）和卸载（Unmounting）。React提供了一组特殊的方法，称为“生命周期方法”，这些方法会在组件不同生命周期阶段被自动调用。这里，我将以类组件为例来描述各个生命周期阶段及其对应的方法。</p><h2 id="生命周期图示" tabindex="-1">生命周期图示 <a class="header-anchor" href="#生命周期图示" aria-label="Permalink to &quot;生命周期图示&quot;">​</a></h2><p><img src="'+o+`" alt="React生命周期图示"></p><h2 id="挂载阶段-mounting" tabindex="-1">挂载阶段（Mounting） <a class="header-anchor" href="#挂载阶段-mounting" aria-label="Permalink to &quot;挂载阶段（Mounting）&quot;">​</a></h2><p>在挂载阶段，组件实例被创建并插入到DOM中。以下是这个阶段的生命周期方法：</p><ol><li><strong>constructor</strong>: 构造函数，用于初始化组件的<code>state</code>和绑定事件处理函数。在构造函数里面我们一般会做两件事：</li></ol><ul><li>初始化state对象</li><li>给自定义方法绑定this</li></ul><ol start="2"><li><strong>static getDerivedStateFromProps</strong>: 在组件被挂载之前以及每次更新之前调用，用于从props中派生出新的state。</li></ol><blockquote><p>一个静态方法，所以不能在这个函数里面使用this，这个函数有两个参数props和state，分别指接收到的新参数和当前的state对象，这个函数会返回一个对象用来更新当前的state对象，如果不需要更新可以返回null。该函数会在挂载时，接收到新的props，调用了setState和forceUpdate时被调用</p></blockquote><ol start="3"><li><strong>render</strong>: 该方法负责返回组件的JSX结构。这是唯一必需的生命周期方法。React中最核心的方法，一个组件中必须要有这个方法。返回的类型有以下几种：</li></ol><ul><li>原生的DOM，如div</li><li>React组件</li><li>Fragment（片段）</li><li>Portals（插槽）</li><li>字符串和数字，被渲染成text节点</li><li>Boolean和null，不会渲染任何东西 render函数是纯函数，里面只做一件事，就是返回需要渲染的东西，不应该包含其它的业务逻辑。</li></ul><ol start="4"><li><strong>componentDidMount</strong>: 在组件被成功挂载（即添加到DOM中）后立即调用。这是执行副作用操作的好地方，例如发起网络请求。</li></ol><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* 初始化 state */</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">getDerivedStateFromProps</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 返回一个对象更新state，或者返回null不更新任何内容</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">componentDidMount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 组件已挂载，执行副作用操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/* JSX 结构 */</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="更新阶段-updating" tabindex="-1">更新阶段（Updating） <a class="header-anchor" href="#更新阶段-updating" aria-label="Permalink to &quot;更新阶段（Updating）&quot;">​</a></h2><p>在更新阶段，由于<code>props</code>或<code>state</code>的变化，组件需要进行重新渲染。以下是这个阶段的生命周期方法：</p><ol><li><strong>static getDerivedStateFromProps</strong>: （同上）</li><li><strong>shouldComponentUpdate</strong>: 返回一个布尔值，决定组件是否应该更新。默认情况下，它总是返回<code>true</code>。</li><li><strong>render</strong>: （同上）</li><li><strong>getSnapshotBeforeUpdate</strong>: 在最新的变更被提交到DOM之前被调用，用于捕获DOM信息（如滚动位置）。</li><li><strong>componentDidUpdate</strong>: 在组件完成更新后立即调用。这也是执行副作用操作的好地方。</li></ol><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">shouldComponentUpdate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">nextProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">nextState</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 决定是否应当更新</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getSnapshotBeforeUpdate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">prevProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">prevState</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 捕获一些关于DOM的信息</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">componentDidUpdate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">prevProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">prevState</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">snapshot</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 组件已更新，执行副作用操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/* JSX 结构 */</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="卸载阶段-unmounting" tabindex="-1">卸载阶段（Unmounting） <a class="header-anchor" href="#卸载阶段-unmounting" aria-label="Permalink to &quot;卸载阶段（Unmounting）&quot;">​</a></h2><p>在这个阶段，组件将从DOM中移除。</p><ol><li><strong>componentWillUnmount</strong>: 在组件被卸载和销毁之前立即调用。这是执行清理操作的好地方，例如取消定时器或网络请求。</li></ol><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">componentWillUnmount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 组件将要卸载，执行清理操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/* JSX 结构 */</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>注意：以上只涵盖了React类组件的生命周期方法。React函数组件通过使用<code>useEffect</code> Hook也能实现类似的生命周期行为。</p><h2 id="useeffect-hook实现生命周期行为" tabindex="-1"><code>useEffect</code> Hook实现生命周期行为 <a class="header-anchor" href="#useeffect-hook实现生命周期行为" aria-label="Permalink to &quot;\`useEffect\` Hook实现生命周期行为&quot;">​</a></h2><p><code>useEffect</code> Hook可以让你在函数组件中执行副作用操作。它与类组件中的生命周期方法类似，但有一些不同之处。</p><ol><li><p><strong>componentDidMount</strong>：在组件被挂载之后立即调用。如果你需要在组件挂载后执行某些操作（例如，发起网络请求），则可以在<code>useEffect</code>中执行这些操作。如果你需要在组件挂载和卸载之后执行某些操作（例如，添加和移除事件监听器），则可以传递一个空数组（<code>[]</code>）作为第二个参数。这样，你就可以避免在每次更新时都重新执行副作用操作。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 执行副作用操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在组件卸载时执行清理操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 传递一个空数组作为第二个参数</span></span></code></pre></div></li><li><p><strong>componentDidUpdate</strong>：在组件更新后立即调用。如果你需要在组件更新后执行某些操作（例如，获取DOM节点的最新快照），则可以在<code>useEffect</code>中执行这些操作。如果你需要在组件更新后执行某些操作，但又不想在组件挂载时执行这些操作，则可以传递一个数组（<code>[value]</code>）作为第二个参数。这样，只有当<code>value</code>发生变化时，才会执行副作用操作。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 执行副作用操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在组件卸载时执行清理操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [value])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 传递一个数组作为第二个参数</span></span></code></pre></div></li><li><p><strong>componentWillUnmount</strong>：在组件卸载和销毁之前立即调用。如果你需要在组件卸载和销毁之前执行某些操作（例如，清除定时器），则可以在<code>useEffect</code>中执行这些操作。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 执行副作用操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在组件卸载时执行清理操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ol><h2 id="父子组件生命周期" tabindex="-1">父子组件生命周期 <a class="header-anchor" href="#父子组件生命周期" aria-label="Permalink to &quot;父子组件生命周期&quot;">​</a></h2><p>在 React 应用中，组件的嵌套是非常常见的，经常会有父组件包含子组件的情况。在这种嵌套关系中，父子组件的生命周期函数是如何依次执行的呢？了解这一点对于掌握 React 内部机制是非常有帮助的。</p><p>下面是一个简单的父子组件的生命周期执行顺序的例子：</p><h3 id="类组件示例" tabindex="-1">类组件示例 <a class="header-anchor" href="#类组件示例" aria-label="Permalink to &quot;类组件示例&quot;">​</a></h3><h4 id="挂载阶段-mounting-1" tabindex="-1">挂载阶段（Mounting） <a class="header-anchor" href="#挂载阶段-mounting-1" aria-label="Permalink to &quot;挂载阶段（Mounting）&quot;">​</a></h4><ol><li>父组件 constructor</li><li>父组件 <code>static getDerivedStateFromProps</code></li><li>父组件 <code>render</code></li><li>子组件 constructor</li><li>子组件 <code>static getDerivedStateFromProps</code></li><li>子组件 <code>render</code></li><li>子组件 <code>componentDidMount</code></li><li>父组件 <code>componentDidMount</code></li></ol><h4 id="更新阶段-updating-1" tabindex="-1">更新阶段（Updating） <a class="header-anchor" href="#更新阶段-updating-1" aria-label="Permalink to &quot;更新阶段（Updating）&quot;">​</a></h4><ol><li>父组件 <code>static getDerivedStateFromProps</code></li><li>父组件 <code>shouldComponentUpdate</code></li><li>父组件 <code>render</code></li><li>子组件 <code>static getDerivedStateFromProps</code></li><li>子组件 <code>shouldComponentUpdate</code></li><li>子组件 <code>render</code></li><li>子组件 <code>getSnapshotBeforeUpdate</code></li><li>父组件 <code>getSnapshotBeforeUpdate</code></li><li>子组件 <code>componentDidUpdate</code></li><li>父组件 <code>componentDidUpdate</code></li></ol><h4 id="卸载阶段-unmounting-1" tabindex="-1">卸载阶段（Unmounting） <a class="header-anchor" href="#卸载阶段-unmounting-1" aria-label="Permalink to &quot;卸载阶段（Unmounting）&quot;">​</a></h4><ol><li>父组件 <code>componentWillUnmount</code></li><li>子组件 <code>componentWillUnmount</code></li></ol><h4 id="函数组件示例-使用-hooks" tabindex="-1">函数组件示例（使用 Hooks） <a class="header-anchor" href="#函数组件示例-使用-hooks" aria-label="Permalink to &quot;函数组件示例（使用 Hooks）&quot;">​</a></h4><p>对于使用 Hooks 的函数组件，你通常会用 <code>useEffect</code> 来处理副作用，包括挂载和卸载：</p><ul><li><code>useEffect(() =&gt; { /* 副作用代码 */ }, [])</code>: 类似于 <code>componentDidMount</code>。</li><li><code>useEffect(() =&gt; { /* 副作用代码 */ })</code>: 类似于 <code>componentDidUpdate</code>。</li><li><code>useEffect(() =&gt; { /* 副作用代码 */ return () =&gt; { /* 清理代码 */ }; }, [])</code>: 清理代码类似于 <code>componentWillUnmount</code>。</li></ul><p>在父子组件中，<code>useEffect</code> 的执行顺序类似于 <code>componentDidMount</code> 和 <code>componentDidUpdate</code>：先子后父。</p><p>注意：这是一个简化的示例，实际应用中可能会更复杂。但它给出了一个大致的顺序，帮助你理解父子组件是如何交互的。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://juejin.cn/post/6844903655372488712" target="_blank" rel="noreferrer">我对 React v16.4 生命周期的理解</a></p>`,44),t=[e];function c(r,i,y,D,F,d){return n(),a("div",null,t)}const u=s(p,[["render",c]]);export{A as __pageData,u as default};
