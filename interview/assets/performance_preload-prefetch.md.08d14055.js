import{_ as a,o,c as e,U as s}from"./chunks/framework.8610b7e0.js";const y=JSON.parse('{"title":"preload和prefetch","description":"","frontmatter":{},"headers":[],"relativePath":"performance/preload-prefetch.md","filePath":"performance/preload-prefetch.md"}'),l={name:"performance/preload-prefetch.md"},t=s('<h1 id="preload和prefetch" tabindex="-1">preload和prefetch <a class="header-anchor" href="#preload和prefetch" aria-label="Permalink to &quot;preload和prefetch&quot;">​</a></h1><p><code>preload</code> 和 <code>prefetch</code> 都是现代浏览器提供的资源提示功能，它们可以帮助开发者控制资源的加载时机，优化页面的加载速度和性能。但它们之间有一些关键的区别，并且各自适用于不同的使用场景。下面我们来探讨它们的区别和各自的使用场景：</p><h3 id="_1-preload" tabindex="-1">1. preload <a class="header-anchor" href="#_1-preload" aria-label="Permalink to &quot;1. preload&quot;">​</a></h3><h4 id="定义" tabindex="-1">定义： <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义：&quot;">​</a></h4><p><code>preload</code> 是一个 web 标准，允许开发者指定页面加载生命周期中的哪个阶段要提前请求某个资源。它是一种声明资源优先级的方式，使得浏览器可以更早地请求并获取资源。</p><p>当你在文档中使用 <code>&lt;link rel=&quot;preload&quot;&gt;</code>，这告诉浏览器：</p><ol><li>该资源是当前页面中的一个重要资源。</li><li>尽快请求这个资源，即使它在页面加载过程中并不会立刻用到。</li></ol><p>例如：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">preload</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">as</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">important-script.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>关于 <code>preload</code> 的执行时机，以下是要考虑的几点：</p><ol><li><p><strong>开始时间</strong>：<code>preload</code> 的资源会在浏览器完成解析 <code>&lt;head&gt;</code> 之后尽快开始加载。但是，实际的开始时间取决于浏览器的预加载扫描器和网络的空闲时间。</p></li><li><p><strong>不阻塞</strong>：预加载的资源不会阻塞 <code>onload</code> 事件，意味着它们不会阻止页面的主内容加载。</p></li><li><p><strong>持续时间</strong>：资源的预加载会在当前页面的生命周期中一直保持。换句话说，如果你预加载了一个资源，但在当前页面的生命周期中从未使用它，它就会被浏览器丢弃，不会持久化到下一个页面。</p></li><li><p><strong>优先级</strong>：尽管 <code>preload</code> 资源会尽早加载，但它们的优先级可能低于关键的内部资源（例如内部的 CSS 或者同步的 JS）。具体的优先级取决于资源的类型和浏览器。</p></li><li><p><strong>使用</strong>：仅仅预加载资源并不意味着它会被执行或应用。例如，预加载的 JavaScript 文件需要另外的 <code>&lt;script&gt;</code> 标签来执行。如果资源被预加载但从未使用，它只是被提前获取了，并被存储在浏览器的缓存中。</p></li></ol><h4 id="使用场景" tabindex="-1">使用场景： <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景：&quot;">​</a></h4><ul><li><strong>关键资源</strong>：当你知道某些资源（如关键的CSS或JavaScript文件）在页面加载后会立即需要时，可以使用 <code>preload</code>。</li><li><strong>不在DOM的资源</strong>：对于默认不被解析的、但即将被用到的资源，例如通过 JavaScript 动态添加到页面的字体文件。</li><li><strong>按需加载的模块</strong>：如果你正在使用模块化的JavaScript，并且知道在主模块加载后会立即请求另一个模块，那么可以提前加载该模块。</li></ul><h4 id="语法" tabindex="-1">语法： <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法：&quot;">​</a></h4><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">preload</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">as</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myscript.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="_2-prefetch" tabindex="-1">2. prefetch <a class="header-anchor" href="#_2-prefetch" aria-label="Permalink to &quot;2. prefetch&quot;">​</a></h3><h4 id="定义-1" tabindex="-1">定义： <a class="header-anchor" href="#定义-1" aria-label="Permalink to &quot;定义：&quot;">​</a></h4><ul><li><code>prefetch</code> 是一种告诉浏览器，某资源在未来可能会被用到，所以当浏览器空闲时，可以提前加载它的方式。</li></ul><h4 id="使用场景-1" tabindex="-1">使用场景： <a class="header-anchor" href="#使用场景-1" aria-label="Permalink to &quot;使用场景：&quot;">​</a></h4><ul><li><strong>未来的导航</strong>：当你预计用户可能会点击某个链接并导航到另一个页面时，可以预先获取那个页面的资源。例如，如果用户在主页上，并且经常点击“关于”链接，那么你可以预先获取“关于”页面的资源。</li><li><strong>预测用户行为</strong>：根据用户的行为或其他数据分析预测，提前加载可能会在未来被用户请求的资源。</li></ul><h4 id="语法-1" tabindex="-1">语法： <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;语法：&quot;">​</a></h4><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prefetch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nextpage.html</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="主要区别" tabindex="-1">主要区别： <a class="header-anchor" href="#主要区别" aria-label="Permalink to &quot;主要区别：&quot;">​</a></h3><ol><li><p><strong>优先级</strong>：<code>preload</code> 的优先级高于 <code>prefetch</code>。因为 <code>preload</code> 的资源被视为当前页面的关键资源，而 <code>prefetch</code> 的资源被视为低优先级资源，仅在浏览器空闲时加载。</p></li><li><p><strong>使用意图</strong>：<code>preload</code> 用于加载当前页面上即将需要的资源；而 <code>prefetch</code> 用于加载用户在不久的将来可能需要的资源。</p></li><li><p><strong>浏览器支持</strong>：尽管现代浏览器大都支持这两个功能，但它们的支持度可能会有所不同。建议在使用前检查特定浏览器的支持度。</p></li></ol><p>总结，<code>preload</code> 和 <code>prefetch</code> 都是优化资源加载的强大工具，但关键在于理解和识别最适合你的使用场景的那一个，并据此做出决策。</p>',25),p=[t];function r(n,c,d,i,h,D){return o(),e("div",null,p)}const u=a(l,[["render",r]]);export{y as __pageData,u as default};
