import{_ as s,o as a,c as n,U as l}from"./chunks/framework.8610b7e0.js";const d=JSON.parse('{"title":"如何处理服务端渲染（SSR）？","description":"","frontmatter":{},"headers":[],"relativePath":"react/server-side-rendering.md","filePath":"react/server-side-rendering.md"}'),o={name:"react/server-side-rendering.md"},p=l(`<h1 id="如何处理服务端渲染-ssr" tabindex="-1">如何处理服务端渲染（SSR）？ <a class="header-anchor" href="#如何处理服务端渲染-ssr" aria-label="Permalink to &quot;如何处理服务端渲染（SSR）？&quot;">​</a></h1><p>服务端渲染（SSR）是一种常用于优化前端应用性能和SEO（搜索引擎优化）的技术。在服务器端渲染页面时，服务器将返回完全渲染好的HTML页面，这样客户端可以直接解析和显示。这不仅可以提高首屏加载速度，而且还有助于提高网站在搜索引擎中的排名。</p><p>在React应用中，你可以通过以下几种方式来处理SSR：</p><h2 id="_1-使用node-js服务器" tabindex="-1">1. 使用Node.js服务器 <a class="header-anchor" href="#_1-使用node-js服务器" aria-label="Permalink to &quot;1. 使用Node.js服务器&quot;">​</a></h2><p>你可以使用Node.js服务器（例如Express）和<code>ReactDOMServer.renderToString()</code>来渲染React组件。</p><p>示例：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> express </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> ReactDOMServer </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-dom/server</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> App </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./App</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">express</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">content</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ReactDOMServer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">renderToString</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;"> /&gt;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;html&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">      &lt;head&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;title&gt;My SSR App&lt;/title&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">      &lt;/head&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">      &lt;body&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;div id=&quot;root&quot;&gt;</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">      &lt;/body&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;/html&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_2-使用第三方库" tabindex="-1">2. 使用第三方库 <a class="header-anchor" href="#_2-使用第三方库" aria-label="Permalink to &quot;2. 使用第三方库&quot;">​</a></h2><p>除了自己实现SSR，你还可以使用第三方库，如Next.js，Gatsby或Razzle。这些库提供了更完整、更简便的SSR解决方案。</p><h3 id="next-js" tabindex="-1">Next.js <a class="header-anchor" href="#next-js" aria-label="Permalink to &quot;Next.js&quot;">​</a></h3><p>Next.js是最流行的SSR解决方案之一。你只需运行<code>npx create-next-app</code>，然后在<code>pages</code>目录中添加你的React组件，Next.js会自动处理SSR。</p><h2 id="_3-数据预加载" tabindex="-1">3. 数据预加载 <a class="header-anchor" href="#_3-数据预加载" aria-label="Permalink to &quot;3. 数据预加载&quot;">​</a></h2><p>如果你的应用依赖于异步数据，确保在服务器端渲染前预加载所有必要的数据。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 确保所有数据都已加载</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> preloadedData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchData</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将数据传递给组件</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ReactDOMServer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">renderToString</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">data</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">preloadedData</span><span style="color:#89DDFF;">} /&gt;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_4-避免客户端特定的代码" tabindex="-1">4. 避免客户端特定的代码 <a class="header-anchor" href="#_4-避免客户端特定的代码" aria-label="Permalink to &quot;4. 避免客户端特定的代码&quot;">​</a></h2><p>由于服务器端代码是在Node.js环境中运行的，所有与浏览器API（如<code>window</code>或<code>document</code>）相关的代码都可能会出现问题。确保这些代码仅在客户端运行。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> window </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 客户端特定的代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_5-css和js处理" tabindex="-1">5. CSS和JS处理 <a class="header-anchor" href="#_5-css和js处理" aria-label="Permalink to &quot;5. CSS和JS处理&quot;">​</a></h2><p>对于CSS，你可能需要使用像Styled-components或是Emotion这样的库，它们支持SSR。 对于JavaScript，确保你的代码分块（code-splitting）能与SSR兼容。这通常可以通过动态导入（<code>import()</code>）或是使用像Loadable Components这样的库来实现。</p><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p>服务端渲染（Server-Side Rendering, SSR）是一种在服务器端生成应用页面的 HTML 内容的技术。下面是 SSR 的基本工作原理：</p><ol><li><p><strong>请求处理</strong>：用户通过浏览器向服务器发出一个页面请求。</p></li><li><p><strong>路由匹配</strong>：服务器根据请求的 URL，通过路由匹配找到相应的后端逻辑。</p></li><li><p><strong>数据获取</strong>：服务器执行必要的 API 调用，数据库查询，或其他异步操作，以获取页面需要的数据。</p></li><li><p><strong>模板渲染</strong>：使用获取到的数据，服务器会执行一个服务器端的渲染引擎（比如 React SSR、Vue SSR 等）生成完整的 HTML 页面。</p></li><li><p><strong>发送响应</strong>：生成的 HTML 随后会作为响应被发送回请求的客户端。</p></li><li><p><strong>浏览器渲染</strong>：客户端（通常是浏览器）接收到 HTML 内容并渲染出页面。</p></li><li><p><strong>客户端脚本接管（Hydration）</strong>：此时，与 SSR 对应的客户端 JavaScript 代码会被下载并执行，这个过程通常被称为 &quot;Hydration&quot;。这使得页面成为一个完全交互的单页面应用（SPA）。</p></li></ol><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><ul><li><p><strong>首屏加载快</strong>：由于 HTML 内容是直接由服务器生成的，因此页面的首次渲染速度通常会更快。</p></li><li><p><strong>SEO 优化</strong>：搜索引擎能更好地索引服务器渲染的页面，有助于提高网站的搜索排名。</p></li><li><p><strong>服务器负载</strong>：虽然 SSR 增加了服务器的负担，但对于高流量的网站来说，它可以通过减少客户端请求的数量，实现更高的性能。</p></li></ul><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><ul><li><p><strong>服务器压力大</strong>：因为每个页面请求都需要服务器进行渲染，所以服务器的压力会增大。</p></li><li><p><strong>开发复杂性</strong>：SSR 需要客户端和服务器端代码、状态以及路由的同步，这可能会增加开发的复杂性。</p></li></ul><p>服务器端渲染是一种复杂但强大的技术，适用于需要快速首屏渲染和良好 SEO 的应用。然而，它也需要更多的服务器资源和更高的开发复杂度。所以，在决定是否使用 SSR 时，需要综合考虑多种因素。</p>`,27),e=[p];function t(r,c,i,D,y,F){return a(),n("div",null,e)}const A=s(o,[["render",t]]);export{d as __pageData,A as default};
