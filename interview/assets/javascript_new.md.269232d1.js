import{_ as s,o as a,c as n,U as o}from"./chunks/framework.8610b7e0.js";const C=JSON.parse('{"title":"new() 底层实现","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/new.md","filePath":"javascript/new.md"}'),l={name:"javascript/new.md"},e=o(`<h1 id="new-底层实现" tabindex="-1">new() 底层实现 <a class="header-anchor" href="#new-底层实现" aria-label="Permalink to &quot;new() 底层实现&quot;">​</a></h1><p>在 JavaScript 中，使用 <code>new</code> 操作符创建一个新对象的过程涉及几个关键步骤，这些步骤反映了 <code>new</code> 操作符的底层实现机制。当你执行类似 <code>new MyClass()</code> 的代码时，大致发生以下事情：</p><h3 id="_1-创建新对象" tabindex="-1">1. 创建新对象 <a class="header-anchor" href="#_1-创建新对象" aria-label="Permalink to &quot;1. 创建新对象&quot;">​</a></h3><p>首先，JavaScript 引擎会创建一个新的空对象。</p><h3 id="_2-设置原型" tabindex="-1">2. 设置原型 <a class="header-anchor" href="#_2-设置原型" aria-label="Permalink to &quot;2. 设置原型&quot;">​</a></h3><p>接着，这个新对象的内部 <code>[[Prototype]]</code> （也就是通常所说的 <code>__proto__</code>）会被赋值为构造函数的 <code>prototype</code> 属性。这意味着新对象可以访问构造函数原型上的属性和方法。</p><h3 id="_3-将构造函数的-this-绑定到新对象" tabindex="-1">3. 将构造函数的 <code>this</code> 绑定到新对象 <a class="header-anchor" href="#_3-将构造函数的-this-绑定到新对象" aria-label="Permalink to &quot;3. 将构造函数的 \`this\` 绑定到新对象&quot;">​</a></h3><p>构造函数内的 <code>this</code> 会被绑定到新创建的对象上。这样，当构造函数内部的代码执行时，任何对 <code>this</code> 的引用都会指向这个新对象。</p><h3 id="_4-执行构造函数" tabindex="-1">4. 执行构造函数 <a class="header-anchor" href="#_4-执行构造函数" aria-label="Permalink to &quot;4. 执行构造函数&quot;">​</a></h3><p>构造函数内部的代码（即初始化代码）随后被执行。通常，这些代码会初始化新对象的属性。</p><h3 id="_5-返回新对象" tabindex="-1">5. 返回新对象 <a class="header-anchor" href="#_5-返回新对象" aria-label="Permalink to &quot;5. 返回新对象&quot;">​</a></h3><p>如果构造函数返回一个对象，则这个对象会被返回；如果构造函数没有返回对象，则会返回步骤 1 创建的新对象。</p><h3 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h3><p>为了更好地理解这个过程，可以看一个简单的 JavaScript 函数和 <code>new</code> 操作符的模拟实现：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyClass</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">property</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用 new 操作符创建 MyClass 的一个实例</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myInstance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyClass</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在这个例子中，<code>myInstance</code> 是 <code>MyClass</code> 的一个新实例。它继承了 <code>MyClass.prototype</code> 上的所有属性和方法，并且拥有 <code>MyClass</code> 构造函数中定义的属性。</p><h3 id="模拟-new-操作符的实现" tabindex="-1">模拟 <code>new</code> 操作符的实现 <a class="header-anchor" href="#模拟-new-操作符的实现" aria-label="Permalink to &quot;模拟 \`new\` 操作符的实现&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">simulateNew</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">constructor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 步骤 1: 创建一个新对象</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 步骤 2: 将对象的原型指向构造函数的 prototype</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 步骤 3 &amp; 4: 将构造函数的 this 绑定到新对象，并执行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">constructor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 步骤 5: 根据返回值类型决定是返回新对象还是返回值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这个 <code>simulateNew</code> 函数模拟了 <code>new</code> 操作符的基本行为。在实际的 JavaScript 引擎中，<code>new</code> 操作符的实现要复杂得多，但基本原理是相似的。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p><code>new</code> 操作符在 JavaScript 中是创建基于原型继承的对象的重要机制。它创建了一个新对象，将其原型设置为构造函数的 <code>prototype</code> 对象，并执行构造函数，最后返回新对象。了解这一过程有助于深入理解 JavaScript 中的对象、原型和继承。</p>`,21),p=[e];function t(c,r,y,i,F,D){return a(),n("div",null,p)}const h=s(l,[["render",t]]);export{C as __pageData,h as default};
