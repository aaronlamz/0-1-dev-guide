import{_ as s,o as n,c as a,U as l}from"./chunks/framework.8610b7e0.js";const C=JSON.parse('{"title":"Webpack 实现原理","description":"","frontmatter":{},"headers":[],"relativePath":"build-tool/webpack.md","filePath":"build-tool/webpack.md"}'),p={name:"build-tool/webpack.md"},o=l(`<h1 id="webpack-实现原理" tabindex="-1">Webpack 实现原理 <a class="header-anchor" href="#webpack-实现原理" aria-label="Permalink to &quot;Webpack 实现原理&quot;">​</a></h1><p>Webpack 的实现原理可以分为几个主要部分：入口分析、依赖处理、模块打包、文件输出，以及插件系统。下面是这些部分的详细解释：</p><h2 id="_1-入口分析-entry-analysis" tabindex="-1">1. 入口分析（Entry Analysis） <a class="header-anchor" href="#_1-入口分析-entry-analysis" aria-label="Permalink to &quot;1. 入口分析（Entry Analysis）&quot;">​</a></h2><ul><li><strong>入口点</strong>：Webpack 需要一个或多个入口点来开始构建过程。入口点通常是应用程序的主文件，Webpack 从这里开始解析依赖。</li><li><strong>解析依赖</strong>：Webpack 读取入口文件，解析包含的 <code>import</code> 和 <code>require</code> 语句，递归地构建一个依赖图，包括应用中使用的所有模块。</li></ul><h2 id="_2-依赖处理-dependency-resolution" tabindex="-1">2. 依赖处理（Dependency Resolution） <a class="header-anchor" href="#_2-依赖处理-dependency-resolution" aria-label="Permalink to &quot;2. 依赖处理（Dependency Resolution）&quot;">​</a></h2><ul><li><strong>加载器（Loaders）</strong>：Webpack 使用加载器来处理非 JavaScript 文件（如 CSS、图片、字体等）。加载器转换这些文件为模块，使它们可以被应用程序使用。</li><li><strong>解析器（Parser）</strong>：Webpack 使用解析器（例如 Acorn）将每个文件转换为 AST（抽象语法树）。这允许 Webpack 分析代码中的各种语句，找出依赖关系。</li></ul><h2 id="_3-模块打包-bundling" tabindex="-1">3. 模块打包（Bundling） <a class="header-anchor" href="#_3-模块打包-bundling" aria-label="Permalink to &quot;3. 模块打包（Bundling）&quot;">​</a></h2><ul><li><strong>模块处理</strong>：Webpack 对每个模块应用相应的加载器，然后将其添加到依赖图中。</li><li><strong>代码合并</strong>：所有模块（原始源代码及其所有依赖）最终被合并成一个或多个 bundle。这些 bundle 是包含了所有必需模块的文件。</li></ul><h2 id="_4-文件输出-output" tabindex="-1">4. 文件输出（Output） <a class="header-anchor" href="#_4-文件输出-output" aria-label="Permalink to &quot;4. 文件输出（Output）&quot;">​</a></h2><ul><li><strong>输出结果</strong>：根据配置，Webpack 将处理后的代码和资源输出为一个或多个文件。</li><li><strong>代码拆分</strong>（Code Splitting）：Webpack 可以将代码拆分为多个 bundle，以优化加载性能。</li></ul><h2 id="_5-插件系统-plugins" tabindex="-1">5. 插件系统（Plugins） <a class="header-anchor" href="#_5-插件系统-plugins" aria-label="Permalink to &quot;5. 插件系统（Plugins）&quot;">​</a></h2><ul><li><strong>扩展功能</strong>：Webpack 的插件系统允许开发者扩展其构建流程。插件可以在构建的不同阶段执行任务，如代码压缩、环境变量注入、生成 HTML 文件等。</li><li><strong>事件钩子</strong>：插件可以绑定到整个构建流程的各种事件钩子上，从而在特定时刻执行操作。</li></ul><h2 id="_6-编译-compilation" tabindex="-1">6. 编译（Compilation） <a class="header-anchor" href="#_6-编译-compilation" aria-label="Permalink to &quot;6. 编译（Compilation）&quot;">​</a></h2><ul><li><strong>编译过程</strong>：Webpack 的编译过程涵盖了从入口分析到文件输出的整个过程。这个过程涉及模块的解析、处理和转换。</li></ul><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><p>要实现一个类似于 Webpack 这样的基础版本的模块打包器，我们可以遵循几个基本步骤：解析文件依赖、转换代码、以及打包生成输出文件。下面是一个简化版模块打包器的示例实现：</p><h3 id="_1-解析文件依赖" tabindex="-1">1. 解析文件依赖 <a class="header-anchor" href="#_1-解析文件依赖" aria-label="Permalink to &quot;1. 解析文件依赖&quot;">​</a></h3><p>首先，我们需要分析入口文件，并递归地找出所有依赖的模块。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> babelParser </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@babel/parser</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> traverse </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@babel/traverse</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> babel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@babel/core</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 解析单个文件的依赖</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parseDependencies</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">filePath</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">content</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">filePath</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ast</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">babelParser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        sourceType</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dependencies</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">traverse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ast</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        ImportDeclaration</span><span style="color:#89DDFF;">({</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">dependencies</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dependencies</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 递归地解析所有依赖</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">collectDependencies</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">entry</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">entryPath</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">entry</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">entryDependencies</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">parseDependencies</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">entryPath</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 递归解析</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 你可以在这里添加更多的逻辑，比如处理依赖的路径等</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_2-转换代码" tabindex="-1">2. 转换代码 <a class="header-anchor" href="#_2-转换代码" aria-label="Permalink to &quot;2. 转换代码&quot;">​</a></h3><p>使用 Babel 转换每个模块的代码，使其可以在浏览器中运行。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 转换模块代码</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">transformModule</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">filePath</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">content</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">filePath</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">transformed</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">babel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transform</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        presets</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@babel/preset-env</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">transformed</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">code</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_3-生成打包文件" tabindex="-1">3. 生成打包文件 <a class="header-anchor" href="#_3-生成打包文件" aria-label="Permalink to &quot;3. 生成打包文件&quot;">​</a></h3><p>最后，我们需要将所有模块的代码合并为一个文件，并处理模块间的依赖关系。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 生成打包文件</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bundle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">entry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">output</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 收集所有依赖</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dependencies</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">collectDependencies</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">entry</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 转换每个模块并合并代码</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">modules</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">dependencies</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">depPath</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">transformedCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">transformModule</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">depPath</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">modules</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">            &#39;</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">depPath</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&#39;: function(require, module, exports) {</span></span>
<span class="line"><span style="color:#C3E88D;">                </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">transformedCode</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C3E88D;">            },</span></span>
<span class="line"><span style="color:#C3E88D;">        </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 生成打包后的文件内容</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">        (function(modules) {</span></span>
<span class="line"><span style="color:#C3E88D;">            // 模块缓存</span></span>
<span class="line"><span style="color:#C3E88D;">            var installedModules = {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">            // 模拟 require 函数</span></span>
<span class="line"><span style="color:#C3E88D;">            function require(moduleId) {</span></span>
<span class="line"><span style="color:#C3E88D;">                // ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">                // 执行模块代码</span></span>
<span class="line"><span style="color:#C3E88D;">                // ...</span></span>
<span class="line"><span style="color:#C3E88D;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">            // 执行入口模块</span></span>
<span class="line"><span style="color:#C3E88D;">            require(&#39;</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&#39;);</span></span>
<span class="line"><span style="color:#C3E88D;">        })({</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">modules</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">});</span></span>
<span class="line"><span style="color:#C3E88D;">    </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 写入输出文件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeFileSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">output</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用示例</span></span>
<span class="line"><span style="color:#82AAFF;">bundle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/index.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dist/bundle.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>这个实现是高度简化的，只用于展示 Webpack 基本原理。</li><li>实际的 Webpack 实现远比这个示例复杂，包括处理多种文件类型、优化配置、插件系统等功能。</li><li>你可能需要根据实际需求调整和完善这个简化版打包器的代码。</li></ul>`,27),e=[o];function t(c,r,y,F,D,i){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
