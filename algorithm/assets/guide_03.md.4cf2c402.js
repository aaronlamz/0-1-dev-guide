import{_ as a,o as e,c as r,O as o}from"./chunks/framework.7decba4c.js";const b=JSON.parse('{"title":"复杂度分析","description":"","frontmatter":{},"headers":[],"relativePath":"guide/03.md","filePath":"guide/03.md"}'),t={name:"guide/03.md"},n=o('<h1 id="复杂度分析" tabindex="-1">复杂度分析 <a class="header-anchor" href="#复杂度分析" aria-label="Permalink to &quot;复杂度分析&quot;">​</a></h1><p>执行效率是算法一个非常重要的考量指标，一个算法的执行效率可以从多个方面来衡量，比如时间复杂度、空间复杂度等。本节我们将从时间复杂度和空间复杂度两个方面来分析算法的执行效率。</p><h2 id="为什么要分析算法的复杂度" tabindex="-1">为什么要分析算法的复杂度 <a class="header-anchor" href="#为什么要分析算法的复杂度" aria-label="Permalink to &quot;为什么要分析算法的复杂度&quot;">​</a></h2><p>在实际的开发中，我们可能会遇到这样的情况，同一种功能，有多种算法可以实现，比如排序算法，我们可以选择冒泡排序、插入排序、选择排序、归并排序、快速排序等等。那么，我们应该选择哪种算法呢？这个时候，我们就需要一个评价标准，来衡量、评估这些算法的优劣。而算法的执行效率，就是我们最常用的评价标准。</p><h2 id="复杂度表示" tabindex="-1">复杂度表示 <a class="header-anchor" href="#复杂度表示" aria-label="Permalink to &quot;复杂度表示&quot;">​</a></h2><h3 id="时间复杂度" tabindex="-1">时间复杂度 <a class="header-anchor" href="#时间复杂度" aria-label="Permalink to &quot;时间复杂度&quot;">​</a></h3><p>时间复杂度是指执行算法所需要的计算工作量。我们通常用 $T(n)$ 来表示，其中 $n$ 表示数据规模的大小。比如，$T(n) = 2n + 3$，表示执行算法所需要的计算工作量是随着数据规模大小线性增长的。</p><h3 id="空间复杂度" tabindex="-1">空间复杂度 <a class="header-anchor" href="#空间复杂度" aria-label="Permalink to &quot;空间复杂度&quot;">​</a></h3><p>空间复杂度是指执行算法所需要的存储空间。我们通常用 $S(n)$ 来表示，其中 $n$ 表示数据规模的大小。比如，$S(n) = n + 1$，表示执行算法所需要的存储空间是随着数据规模大小线性增长的。</p><h2 id="大-o-复杂度表示法" tabindex="-1">大 O 复杂度表示法 <a class="header-anchor" href="#大-o-复杂度表示法" aria-label="Permalink to &quot;大 O 复杂度表示法&quot;">​</a></h2><p>大 O 复杂度表示法，是指在进行复杂度分析时，保留最大的量级，忽略系数、低阶、常量。比如，$T(n) = 2n + 3$，我们可以简化为 $T(n) = O(n)$。</p><h2 id="时间复杂度分析" tabindex="-1">时间复杂度分析 <a class="header-anchor" href="#时间复杂度分析" aria-label="Permalink to &quot;时间复杂度分析&quot;">​</a></h2><h3 id="最好情况时间复杂度" tabindex="-1">最好情况时间复杂度 <a class="header-anchor" href="#最好情况时间复杂度" aria-label="Permalink to &quot;最好情况时间复杂度&quot;">​</a></h3><p>最好情况时间复杂度，表示在最理想的情况下，执行这段代码的时间复杂度。比如，对于二分查找来说，就是要查找的数刚好是数组的中间位置，那么只需要一次比较就能找到。这是最理想的情况，时间复杂度为 $O(1)$。</p><h3 id="最坏情况时间复杂度" tabindex="-1">最坏情况时间复杂度 <a class="header-anchor" href="#最坏情况时间复杂度" aria-label="Permalink to &quot;最坏情况时间复杂度&quot;">​</a></h3><p>最坏情况时间复杂度，表示在最糟糕的情况下，执行这段代码的时间复杂度。比如，对于二分查找来说，就是要查找的数要么不存在，要么在数组的最左边或者最右边，那么就需要执行 $logn$ 次。这是最糟糕的情况，时间复杂度为 $O(logn)$。</p><h3 id="平均情况时间复杂度" tabindex="-1">平均情况时间复杂度 <a class="header-anchor" href="#平均情况时间复杂度" aria-label="Permalink to &quot;平均情况时间复杂度&quot;">​</a></h3><p>平均情况时间复杂度，表示所有情况下，执行这段代码的时间复杂度。比如，对于二分查找来说，就是要查找的数在数组中任意位置的概率都是相同的，那么需要执行 $logn$ 次。这是所有情况下的平均情况，时间复杂度为 $O(logn)$。</p><h3 id="均摊时间复杂度" tabindex="-1">均摊时间复杂度 <a class="header-anchor" href="#均摊时间复杂度" aria-label="Permalink to &quot;均摊时间复杂度&quot;">​</a></h3><p>均摊时间复杂度，表示在一系列操作中，平均每个操作的时间复杂度。比如，对于动态数组来说，插入操作的时间复杂度是 $O(1)$，但是如果插入操作触发了扩容，那么插入操作的时间复杂度就是 $O(n)$。但是，如果我们将这 $n$ 次插入操作看作一个整体，那么这 $n$ 次插入操作的时间复杂度就是 $O(1)$。这是一系列操作的平均情况，时间复杂度为 $O(1)$。</p><h2 id="空间复杂度分析" tabindex="-1">空间复杂度分析 <a class="header-anchor" href="#空间复杂度分析" aria-label="Permalink to &quot;空间复杂度分析&quot;">​</a></h2><h3 id="最好情况空间复杂度" tabindex="-1">最好情况空间复杂度 <a class="header-anchor" href="#最好情况空间复杂度" aria-label="Permalink to &quot;最好情况空间复杂度&quot;">​</a></h3><p>最好情况空间复杂度，表示在最理想的情况下，执行这段代码的空间复杂度。比如，对于二分查找来说，就是要查找的数刚好是数组的中间位置，那么只需要一次比较就能找到。这是最理想的情况，空间复杂度为 $O(1)$。</p><h3 id="最坏情况空间复杂度" tabindex="-1">最坏情况空间复杂度 <a class="header-anchor" href="#最坏情况空间复杂度" aria-label="Permalink to &quot;最坏情况空间复杂度&quot;">​</a></h3><p>最坏情况空间复杂度，表示在最糟糕的情况下，执行这段代码的空间复杂度。比如，对于二分查找来说，就是要查找的数要么不存在，要么在数组的最左边或者最右边，那么就需要执行 $logn$ 次。这是最糟糕的情况，空间复杂度为 $O(logn)$。</p><h3 id="平均情况空间复杂度" tabindex="-1">平均情况空间复杂度 <a class="header-anchor" href="#平均情况空间复杂度" aria-label="Permalink to &quot;平均情况空间复杂度&quot;">​</a></h3><p>平均情况空间复杂度，表示所有情况下，执行这段代码的空间复杂度。比如，对于二分查找来说，就是要查找的数在数组中任意位置的概率都是相同的，那么需要执行 $logn$ 次。这是所有情况下的平均情况，空间复杂度为 $O(logn)$。</p><h3 id="均摊空间复杂度" tabindex="-1">均摊空间复杂度 <a class="header-anchor" href="#均摊空间复杂度" aria-label="Permalink to &quot;均摊空间复杂度&quot;">​</a></h3><p>均摊空间复杂度，表示在一系列操作中，平均每个操作的空间复杂度。比如，对于动态数组来说，插入操作的时间复杂度是 $O(1)$，但是如果插入操作触发了扩容，那么插入操作的时间复杂度就是 $O(n)$。但是，如果我们将这 $n$ 次插入操作看作一个整体，那么这 $n$ 次插入操作的时间复杂度就是 $O(1)$。这是一系列操作的平均情况，空间复杂度为 $O(1)$。</p><h2 id="常见的时间复杂度" tabindex="-1">常见的时间复杂度 <a class="header-anchor" href="#常见的时间复杂度" aria-label="Permalink to &quot;常见的时间复杂度&quot;">​</a></h2><h3 id="常数阶-o-1" tabindex="-1">常数阶 $O(1)$ <a class="header-anchor" href="#常数阶-o-1" aria-label="Permalink to &quot;常数阶 $O(1)$&quot;">​</a></h3>',31),h=[n];function l(i,d,$,s,c,u){return e(),r("div",null,h)}const q=a(t,[["render",l]]);export{b as __pageData,q as default};
