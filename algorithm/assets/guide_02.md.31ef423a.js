import{_ as l,o as i,c as e,O as a}from"./chunks/framework.7decba4c.js";const m=JSON.parse('{"title":"如何系统高效地学习数据结构与算法？","description":"","frontmatter":{},"headers":[],"relativePath":"guide/02.md","filePath":"guide/02.md"}'),t={name:"guide/02.md"},o=a('<h1 id="如何系统高效地学习数据结构与算法" tabindex="-1">如何系统高效地学习数据结构与算法？ <a class="header-anchor" href="#如何系统高效地学习数据结构与算法" aria-label="Permalink to &quot;如何系统高效地学习数据结构与算法？&quot;">​</a></h1><blockquote><p>如何高效学习数据结构与算法，这个见人见智，每个人都有自己的学习方法，但是我认为，学习数据结构与算法，最重要的是要有系统性，要有整体的把握，才能让你的学习更加高效。以下是数据结构与算法的学习脉络，希望对你有所帮助。</p></blockquote><h2 id="数据结构与算法脉络" tabindex="-1">数据结构与算法脉络 <a class="header-anchor" href="#数据结构与算法脉络" aria-label="Permalink to &quot;数据结构与算法脉络&quot;">​</a></h2><ul><li>线性表 <ul><li>数组</li><li>链表</li><li>栈</li><li>队列</li></ul></li><li>散列表 <ul><li>散列函数</li><li>散列冲突</li><li>动态扩容</li><li>位图</li></ul></li><li>树 <ul><li>二叉树</li><li>多路查找树</li><li>堆</li></ul></li><li>图 <ul><li>图的存储</li><li>图的遍历</li><li>最短路径</li><li>最小生成树</li></ul></li><li>复杂度分析 <ul><li>时间复杂度</li><li>空间复杂度</li></ul></li><li>基本算法思想 <ul><li>递归</li><li>分治</li><li>贪心</li><li>动态规划</li><li>回溯</li><li>分支限界</li></ul></li><li>排序算法 <ul><li>冒泡排序</li><li>插入排序</li><li>选择排序</li><li>归并排序</li><li>快速排序</li><li>堆排序</li><li>计数排序</li><li>桶排序</li><li>基数排序</li></ul></li><li>查找算法 <ul><li>顺序查找</li><li>二分查找</li><li>插值查找</li><li>斐波那契查找</li><li>树表查找</li><li>分块查找</li><li>哈希查找</li></ul></li><li>字符串匹配算法 <ul><li>BF算法</li><li>RK算法</li><li>BM算法</li><li>KMP算法</li><li>Trie树</li><li>AC自动机</li></ul></li></ul>',4),u=[o];function r(_,c,s,n,d,h){return i(),e("div",null,u)}const f=l(t,[["render",r]]);export{m as __pageData,f as default};
